[
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "testclient",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "testclient",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "StringsService",
        "importPath": "app.services.strings.service",
        "description": "app.services.strings.service",
        "isExtraImport": true,
        "detail": "app.services.strings.service",
        "documentation": {}
    },
    {
        "label": "StringsService",
        "importPath": "app.services.strings.service",
        "description": "app.services.strings.service",
        "isExtraImport": true,
        "detail": "app.services.strings.service",
        "documentation": {}
    },
    {
        "label": "StringsService",
        "importPath": "app.services.strings.service",
        "description": "app.services.strings.service",
        "isExtraImport": true,
        "detail": "app.services.strings.service",
        "documentation": {}
    },
    {
        "label": "StringsService",
        "importPath": "app.services.strings.service",
        "description": "app.services.strings.service",
        "isExtraImport": true,
        "detail": "app.services.strings.service",
        "documentation": {}
    },
    {
        "label": "StringsService",
        "importPath": "app.services.strings.service",
        "description": "app.services.strings.service",
        "isExtraImport": true,
        "detail": "app.services.strings.service",
        "documentation": {}
    },
    {
        "label": "StringsService",
        "importPath": "app.services.strings.service",
        "description": "app.services.strings.service",
        "isExtraImport": true,
        "detail": "app.services.strings.service",
        "documentation": {}
    },
    {
        "label": "StringsService",
        "importPath": "app.services.strings.service",
        "description": "app.services.strings.service",
        "isExtraImport": true,
        "detail": "app.services.strings.service",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "AuthJWTException",
        "importPath": "fastapi_another_jwt_auth.exceptions",
        "description": "fastapi_another_jwt_auth.exceptions",
        "isExtraImport": true,
        "detail": "fastapi_another_jwt_auth.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthJWTException",
        "importPath": "fastapi_another_jwt_auth.exceptions",
        "description": "fastapi_another_jwt_auth.exceptions",
        "isExtraImport": true,
        "detail": "fastapi_another_jwt_auth.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthJWTException",
        "importPath": "fastapi_another_jwt_auth.exceptions",
        "description": "fastapi_another_jwt_auth.exceptions",
        "isExtraImport": true,
        "detail": "fastapi_another_jwt_auth.exceptions",
        "documentation": {}
    },
    {
        "label": "AppException",
        "importPath": "app.api.exceptions",
        "description": "app.api.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions",
        "documentation": {}
    },
    {
        "label": "AggregateException",
        "importPath": "app.api.exceptions",
        "description": "app.api.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequestFieldException",
        "importPath": "app.api.exceptions",
        "description": "app.api.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.api.exceptions",
        "description": "app.api.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions",
        "documentation": {}
    },
    {
        "label": "handlers",
        "importPath": "app.api.exceptions",
        "description": "app.api.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "app.api.exceptions",
        "description": "app.api.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions",
        "documentation": {}
    },
    {
        "label": "AppException",
        "importPath": "app.api.exceptions",
        "description": "app.api.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions",
        "documentation": {}
    },
    {
        "label": "AggregateException",
        "importPath": "app.api.exceptions",
        "description": "app.api.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequestFieldException",
        "importPath": "app.api.exceptions",
        "description": "app.api.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.api.exceptions",
        "description": "app.api.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidEnumDefException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NameTakenException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "ContextFieldKeyTakenException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "AggregateException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "ContextFieldInUseException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NameTakenException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "AggregateException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "AppException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NameTakenException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "AppException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "AggregateException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NameTakenException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "AppException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "AggregateException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NameTakenException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NameTakenException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NoOwnersLeftException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "EmailTakenException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidProjectException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NoProjectAssignedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidPasswordException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidSetPasswordTokenException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "AppException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidProjectException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NoProjectAssignedException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidEnumDefException",
        "importPath": "app.api.exceptions.exceptions",
        "description": "app.api.exceptions.exceptions",
        "isExtraImport": true,
        "detail": "app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "SystemAuditLog",
        "importPath": "app.api.routes.admin.schemas",
        "description": "app.api.routes.admin.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.admin.schemas",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogs",
        "importPath": "app.api.routes.admin.schemas",
        "description": "app.api.routes.admin.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.admin.schemas",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogs",
        "importPath": "app.api.routes.admin.schemas",
        "description": "app.api.routes.admin.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.admin.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorResponseModel",
        "importPath": "app.api.schemas",
        "description": "app.api.schemas",
        "isExtraImport": true,
        "detail": "app.api.schemas",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserStatus",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "ContextValueType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "ContextValueType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PAGE_SIZE",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "ContextValueType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "ContextValueType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "CONTEXT_VALUE_TYPE_OPERATORS",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "OPERATOR_DISPLAY_NAMES",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PAGE_SIZE",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PAGE_SIZE",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserStatus",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PAGE_SIZE",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserStatus",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserStatus",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "ContextValueType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserStatus",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "ContextValueType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserStatus",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "ContextValueType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "ContextValueType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "UserStatus",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "ContextValueType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "ContextValueType",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogsTable",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.system_audit_logs",
        "description": "app.services.database.mysql.schemas.system_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "importPath": "app.services.database.mysql.service",
        "description": "app.services.database.mysql.service",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "GetAuditLogsController",
        "importPath": "app.api.routes.admin.controllers.get_audit_logs",
        "description": "app.api.routes.admin.controllers.get_audit_logs",
        "isExtraImport": true,
        "detail": "app.api.routes.admin.controllers.get_audit_logs",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pydantic",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pydantic",
        "description": "pydantic",
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "urllib.parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "AuthJWT",
        "importPath": "fastapi_another_jwt_auth",
        "description": "fastapi_another_jwt_auth",
        "isExtraImport": true,
        "detail": "fastapi_another_jwt_auth",
        "documentation": {}
    },
    {
        "label": "AuthJWT",
        "importPath": "fastapi_another_jwt_auth",
        "description": "fastapi_another_jwt_auth",
        "isExtraImport": true,
        "detail": "fastapi_another_jwt_auth",
        "documentation": {}
    },
    {
        "label": "AuthJWT",
        "importPath": "fastapi_another_jwt_auth",
        "description": "fastapi_another_jwt_auth",
        "isExtraImport": true,
        "detail": "fastapi_another_jwt_auth",
        "documentation": {}
    },
    {
        "label": "AuthJWT",
        "importPath": "fastapi_another_jwt_auth",
        "description": "fastapi_another_jwt_auth",
        "isExtraImport": true,
        "detail": "fastapi_another_jwt_auth",
        "documentation": {}
    },
    {
        "label": "AuthJWT",
        "importPath": "fastapi_another_jwt_auth",
        "description": "fastapi_another_jwt_auth",
        "isExtraImport": true,
        "detail": "fastapi_another_jwt_auth",
        "documentation": {}
    },
    {
        "label": "AuthJWT",
        "importPath": "fastapi_another_jwt_auth",
        "description": "fastapi_another_jwt_auth",
        "isExtraImport": true,
        "detail": "fastapi_another_jwt_auth",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "UsersTable",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UsersTable",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserRow",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserRow",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UsersTable",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserRow",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UsersTable",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UsersTable",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserRow",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UsersTable",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserRow",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UsersTable",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserRow",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserRow",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserRow",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserRow",
        "importPath": "app.services.database.mysql.schemas.user",
        "description": "app.services.database.mysql.schemas.user",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "LoginController",
        "importPath": "app.api.routes.auth.controllers.login",
        "description": "app.api.routes.auth.controllers.login",
        "isExtraImport": true,
        "detail": "app.api.routes.auth.controllers.login",
        "documentation": {}
    },
    {
        "label": "LogoutController",
        "importPath": "app.api.routes.auth.controllers.logout",
        "description": "app.api.routes.auth.controllers.logout",
        "isExtraImport": true,
        "detail": "app.api.routes.auth.controllers.logout",
        "documentation": {}
    },
    {
        "label": "ujson",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ujson",
        "description": "ujson",
        "detail": "ujson",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "app.api.routes.context_fields.controllers",
        "description": "app.api.routes.context_fields.controllers",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.controllers",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "app.api.routes.context_fields.controllers",
        "description": "app.api.routes.context_fields.controllers",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.controllers",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "app.api.routes.context_fields.controllers",
        "description": "app.api.routes.context_fields.controllers",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.controllers",
        "documentation": {}
    },
    {
        "label": "CreateContextField",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextField",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextField",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextFieldAuditLogs",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextFieldAuditLog",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextFieldChange",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextFields",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextField",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "UpdateContextField",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextField",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "CreateContextField",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "UpdateContextField",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextField",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.api.routes.context_fields.schemas",
        "description": "app.api.routes.context_fields.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextFieldRow",
        "importPath": "app.services.database.mysql.schemas.context_field",
        "description": "app.services.database.mysql.schemas.context_field",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldsTable",
        "importPath": "app.services.database.mysql.schemas.context_field",
        "description": "app.services.database.mysql.schemas.context_field",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldRow",
        "importPath": "app.services.database.mysql.schemas.context_field",
        "description": "app.services.database.mysql.schemas.context_field",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldsTable",
        "importPath": "app.services.database.mysql.schemas.context_field",
        "description": "app.services.database.mysql.schemas.context_field",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldRow",
        "importPath": "app.services.database.mysql.schemas.context_field",
        "description": "app.services.database.mysql.schemas.context_field",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldsTable",
        "importPath": "app.services.database.mysql.schemas.context_field",
        "description": "app.services.database.mysql.schemas.context_field",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldRow",
        "importPath": "app.services.database.mysql.schemas.context_field",
        "description": "app.services.database.mysql.schemas.context_field",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldsTable",
        "importPath": "app.services.database.mysql.schemas.context_field",
        "description": "app.services.database.mysql.schemas.context_field",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldRow",
        "importPath": "app.services.database.mysql.schemas.context_field",
        "description": "app.services.database.mysql.schemas.context_field",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldsTable",
        "importPath": "app.services.database.mysql.schemas.context_field",
        "description": "app.services.database.mysql.schemas.context_field",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldRow",
        "importPath": "app.services.database.mysql.schemas.context_field",
        "description": "app.services.database.mysql.schemas.context_field",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldRow",
        "importPath": "app.services.database.mysql.schemas.context_field",
        "description": "app.services.database.mysql.schemas.context_field",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.context_field_audit_logs",
        "description": "app.services.database.mysql.schemas.context_field_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field_audit_logs",
        "documentation": {}
    },
    {
        "label": "ContextFieldAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.context_field_audit_logs",
        "description": "app.services.database.mysql.schemas.context_field_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field_audit_logs",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.services.database.mysql.schemas.context_field_audit_logs",
        "description": "app.services.database.mysql.schemas.context_field_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field_audit_logs",
        "documentation": {}
    },
    {
        "label": "ContextFieldAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.context_field_audit_logs",
        "description": "app.services.database.mysql.schemas.context_field_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field_audit_logs",
        "documentation": {}
    },
    {
        "label": "ContextFieldAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.context_field_audit_logs",
        "description": "app.services.database.mysql.schemas.context_field_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.context_field_audit_logs",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.database.redis.service",
        "description": "app.services.database.redis.service",
        "isExtraImport": true,
        "detail": "app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "validates",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "validates",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "validates",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "FeatureFlagsTable",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagRow",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagsTable",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagsTable",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagRow",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagRow",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagsTable",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagRow",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagsTable",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagRow",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagsTable",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagRow",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagRow",
        "importPath": "app.services.database.mysql.schemas.feature_flag",
        "description": "app.services.database.mysql.schemas.feature_flag",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "CreateContextFieldController",
        "importPath": "app.api.routes.context_fields.controllers.create_context_field",
        "description": "app.api.routes.context_fields.controllers.create_context_field",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.controllers.create_context_field",
        "documentation": {}
    },
    {
        "label": "DeleteContextFieldController",
        "importPath": "app.api.routes.context_fields.controllers.delete_context_field",
        "description": "app.api.routes.context_fields.controllers.delete_context_field",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.controllers.delete_context_field",
        "documentation": {}
    },
    {
        "label": "GetContextFieldController",
        "importPath": "app.api.routes.context_fields.controllers.get_context_field",
        "description": "app.api.routes.context_fields.controllers.get_context_field",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.controllers.get_context_field",
        "documentation": {}
    },
    {
        "label": "GetContextFieldAuditLogsController",
        "importPath": "app.api.routes.context_fields.controllers.get_context_field_audit_logs",
        "description": "app.api.routes.context_fields.controllers.get_context_field_audit_logs",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.controllers.get_context_field_audit_logs",
        "documentation": {}
    },
    {
        "label": "GetContextFieldsController",
        "importPath": "app.api.routes.context_fields.controllers.get_context_fields",
        "description": "app.api.routes.context_fields.controllers.get_context_fields",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.controllers.get_context_fields",
        "documentation": {}
    },
    {
        "label": "UpdateContextFieldController",
        "importPath": "app.api.routes.context_fields.controllers.update_context_field",
        "description": "app.api.routes.context_fields.controllers.update_context_field",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.controllers.update_context_field",
        "documentation": {}
    },
    {
        "label": "FeatureFlagCondition",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "CreateOrUpdateFeatureFlag",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlag",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlag",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlagAuditLogs",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlagAuditLog",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlagChange",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlags",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlag",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "CreateOrUpdateFeatureFlag",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlag",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlagCondition",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "UpdateFeatureFlagStatus",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "CreateOrUpdateFeatureFlag",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlag",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlags",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlagCondition",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlagCondition",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlagCondition",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlagCondition",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlagCondition",
        "importPath": "app.api.routes.feature_flags.schemas",
        "description": "app.api.routes.feature_flags.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "app.api.routes.feature_flags.controllers",
        "description": "app.api.routes.feature_flags.controllers",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.controllers",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "app.api.routes.feature_flags.controllers",
        "description": "app.api.routes.feature_flags.controllers",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.controllers",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "app.api.routes.feature_flags.controllers",
        "description": "app.api.routes.feature_flags.controllers",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.controllers",
        "documentation": {}
    },
    {
        "label": "FeatureFlagAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "description": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "documentation": {}
    },
    {
        "label": "FeatureFlagAuditLogsTable",
        "importPath": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "description": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "description": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "documentation": {}
    },
    {
        "label": "FeatureFlagAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "description": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "documentation": {}
    },
    {
        "label": "FeatureFlagAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "description": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "documentation": {}
    },
    {
        "label": "FeatureFlagAuditLogRow",
        "importPath": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "description": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.feature_flag_audit_logs",
        "documentation": {}
    },
    {
        "label": "CreateFeatureFlagController",
        "importPath": "app.api.routes.feature_flags.controllers.create_feature_flag",
        "description": "app.api.routes.feature_flags.controllers.create_feature_flag",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.controllers.create_feature_flag",
        "documentation": {}
    },
    {
        "label": "DeleteFeatureFlagController",
        "importPath": "app.api.routes.feature_flags.controllers.delete_feature_flag",
        "description": "app.api.routes.feature_flags.controllers.delete_feature_flag",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.controllers.delete_feature_flag",
        "documentation": {}
    },
    {
        "label": "GetFeatureFlagController",
        "importPath": "app.api.routes.feature_flags.controllers.get_feature_flag",
        "description": "app.api.routes.feature_flags.controllers.get_feature_flag",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.controllers.get_feature_flag",
        "documentation": {}
    },
    {
        "label": "GetFeatureFlagAuditLogsController",
        "importPath": "app.api.routes.feature_flags.controllers.get_feature_flag_audit_logs",
        "description": "app.api.routes.feature_flags.controllers.get_feature_flag_audit_logs",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.controllers.get_feature_flag_audit_logs",
        "documentation": {}
    },
    {
        "label": "GetFeatureFlagsController",
        "importPath": "app.api.routes.feature_flags.controllers.get_feature_flags",
        "description": "app.api.routes.feature_flags.controllers.get_feature_flags",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.controllers.get_feature_flags",
        "documentation": {}
    },
    {
        "label": "UpdateFeatureFlagController",
        "importPath": "app.api.routes.feature_flags.controllers.update_feature_flag",
        "description": "app.api.routes.feature_flags.controllers.update_feature_flag",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.controllers.update_feature_flag",
        "documentation": {}
    },
    {
        "label": "UpdateFeatureFlagStatusController",
        "importPath": "app.api.routes.feature_flags.controllers.update_feature_flag_status",
        "description": "app.api.routes.feature_flags.controllers.update_feature_flag_status",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.controllers.update_feature_flag_status",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "fernet",
        "importPath": "cryptography",
        "description": "cryptography",
        "isExtraImport": true,
        "detail": "cryptography",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "app.api.routes.projects.controllers",
        "description": "app.api.routes.projects.controllers",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.controllers",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "app.api.routes.projects.controllers",
        "description": "app.api.routes.projects.controllers",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.controllers",
        "documentation": {}
    },
    {
        "label": "CreateOrUpdateProject",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectWithPrivateKey",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKey",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyName",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeys",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyNameAndId",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "Projects",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "CreateOrUpdateProject",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyName",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "Projects",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "CreateOrUpdateProject",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectWithPrivateKey",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.api.routes.projects.schemas",
        "description": "app.api.routes.projects.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectRow",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectsTable",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectRow",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectsTable",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectRow",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectRow",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectRow",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectsTable",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectRow",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectsTable",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectRow",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectsTable",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectsTable",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectRow",
        "importPath": "app.services.database.mysql.schemas.project",
        "description": "app.services.database.mysql.schemas.project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyRow",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyRow",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeysTable",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyRow",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeysTable",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeysTable",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeysTable",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyRow",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyRow",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyRow",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyRow",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyRow",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyRow",
        "importPath": "app.services.database.mysql.schemas.project_private_key",
        "description": "app.services.database.mysql.schemas.project_private_key",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "UserProjectRow",
        "importPath": "app.services.database.mysql.schemas.user_project",
        "description": "app.services.database.mysql.schemas.user_project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user_project",
        "documentation": {}
    },
    {
        "label": "UsersProjectsTable",
        "importPath": "app.services.database.mysql.schemas.user_project",
        "description": "app.services.database.mysql.schemas.user_project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user_project",
        "documentation": {}
    },
    {
        "label": "UsersProjectsTable",
        "importPath": "app.services.database.mysql.schemas.user_project",
        "description": "app.services.database.mysql.schemas.user_project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user_project",
        "documentation": {}
    },
    {
        "label": "UsersProjectsTable",
        "importPath": "app.services.database.mysql.schemas.user_project",
        "description": "app.services.database.mysql.schemas.user_project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user_project",
        "documentation": {}
    },
    {
        "label": "UsersProjectsTable",
        "importPath": "app.services.database.mysql.schemas.user_project",
        "description": "app.services.database.mysql.schemas.user_project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user_project",
        "documentation": {}
    },
    {
        "label": "UsersProjectsTable",
        "importPath": "app.services.database.mysql.schemas.user_project",
        "description": "app.services.database.mysql.schemas.user_project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user_project",
        "documentation": {}
    },
    {
        "label": "UsersProjectsTable",
        "importPath": "app.services.database.mysql.schemas.user_project",
        "description": "app.services.database.mysql.schemas.user_project",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.user_project",
        "documentation": {}
    },
    {
        "label": "CreateProjectController",
        "importPath": "app.api.routes.projects.controllers.create_project",
        "description": "app.api.routes.projects.controllers.create_project",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.controllers.create_project",
        "documentation": {}
    },
    {
        "label": "CreateProjectPrivateKeyController",
        "importPath": "app.api.routes.projects.controllers.create_project_private_key",
        "description": "app.api.routes.projects.controllers.create_project_private_key",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.controllers.create_project_private_key",
        "documentation": {}
    },
    {
        "label": "DeleteProjectController",
        "importPath": "app.api.routes.projects.controllers.delete_project",
        "description": "app.api.routes.projects.controllers.delete_project",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.controllers.delete_project",
        "documentation": {}
    },
    {
        "label": "DeleteProjectPrivateKeyController",
        "importPath": "app.api.routes.projects.controllers.delete_project_private_key",
        "description": "app.api.routes.projects.controllers.delete_project_private_key",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.controllers.delete_project_private_key",
        "documentation": {}
    },
    {
        "label": "GetProjectController",
        "importPath": "app.api.routes.projects.controllers.get_project",
        "description": "app.api.routes.projects.controllers.get_project",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.controllers.get_project",
        "documentation": {}
    },
    {
        "label": "GetProjectPrivateKeysController",
        "importPath": "app.api.routes.projects.controllers.get_project_private_keys",
        "description": "app.api.routes.projects.controllers.get_project_private_keys",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.controllers.get_project_private_keys",
        "documentation": {}
    },
    {
        "label": "GetProjectsController",
        "importPath": "app.api.routes.projects.controllers.get_projects",
        "description": "app.api.routes.projects.controllers.get_projects",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.controllers.get_projects",
        "documentation": {}
    },
    {
        "label": "UpdateProjectController",
        "importPath": "app.api.routes.projects.controllers.update_project",
        "description": "app.api.routes.projects.controllers.update_project",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.controllers.update_project",
        "documentation": {}
    },
    {
        "label": "UpdateProjectPrivateKeyController",
        "importPath": "app.api.routes.projects.controllers.update_project_private_key",
        "description": "app.api.routes.projects.controllers.update_project_private_key",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.controllers.update_project_private_key",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "app.api.routes.users.schemas",
        "description": "app.api.routes.users.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "InviteUser",
        "importPath": "app.api.routes.users.schemas",
        "description": "app.api.routes.users.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "ResetPassword",
        "importPath": "app.api.routes.users.schemas",
        "description": "app.api.routes.users.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "SetPassword",
        "importPath": "app.api.routes.users.schemas",
        "description": "app.api.routes.users.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "UpdateUser",
        "importPath": "app.api.routes.users.schemas",
        "description": "app.api.routes.users.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "SetPassword",
        "importPath": "app.api.routes.users.schemas",
        "description": "app.api.routes.users.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "ResetPassword",
        "importPath": "app.api.routes.users.schemas",
        "description": "app.api.routes.users.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "InviteUser",
        "importPath": "app.api.routes.users.schemas",
        "description": "app.api.routes.users.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "UpdateUser",
        "importPath": "app.api.routes.users.schemas",
        "description": "app.api.routes.users.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "app.api.routes.users.schemas",
        "description": "app.api.routes.users.schemas",
        "isExtraImport": true,
        "detail": "app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "app.api.routes.users.controllers",
        "description": "app.api.routes.users.controllers",
        "isExtraImport": true,
        "detail": "app.api.routes.users.controllers",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "app.api.routes.users.controllers",
        "description": "app.api.routes.users.controllers",
        "isExtraImport": true,
        "detail": "app.api.routes.users.controllers",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "app.api.routes.users.controllers",
        "description": "app.api.routes.users.controllers",
        "isExtraImport": true,
        "detail": "app.api.routes.users.controllers",
        "documentation": {}
    },
    {
        "label": "DeleteUserController",
        "importPath": "app.api.routes.users.controllers.delete_user",
        "description": "app.api.routes.users.controllers.delete_user",
        "isExtraImport": true,
        "detail": "app.api.routes.users.controllers.delete_user",
        "documentation": {}
    },
    {
        "label": "GetUserController",
        "importPath": "app.api.routes.users.controllers.get_user",
        "description": "app.api.routes.users.controllers.get_user",
        "isExtraImport": true,
        "detail": "app.api.routes.users.controllers.get_user",
        "documentation": {}
    },
    {
        "label": "GetUsersController",
        "importPath": "app.api.routes.users.controllers.get_users",
        "description": "app.api.routes.users.controllers.get_users",
        "isExtraImport": true,
        "detail": "app.api.routes.users.controllers.get_users",
        "documentation": {}
    },
    {
        "label": "InviteUserController",
        "importPath": "app.api.routes.users.controllers.invite_user",
        "description": "app.api.routes.users.controllers.invite_user",
        "isExtraImport": true,
        "detail": "app.api.routes.users.controllers.invite_user",
        "documentation": {}
    },
    {
        "label": "ResetPasswordController",
        "importPath": "app.api.routes.users.controllers.reset_password",
        "description": "app.api.routes.users.controllers.reset_password",
        "isExtraImport": true,
        "detail": "app.api.routes.users.controllers.reset_password",
        "documentation": {}
    },
    {
        "label": "SetPasswordController",
        "importPath": "app.api.routes.users.controllers.set_password",
        "description": "app.api.routes.users.controllers.set_password",
        "isExtraImport": true,
        "detail": "app.api.routes.users.controllers.set_password",
        "documentation": {}
    },
    {
        "label": "UpdateUserController",
        "importPath": "app.api.routes.users.controllers.update_user",
        "description": "app.api.routes.users.controllers.update_user",
        "isExtraImport": true,
        "detail": "app.api.routes.users.controllers.update_user",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.routes.admin.routes",
        "description": "app.api.routes.admin.routes",
        "isExtraImport": true,
        "detail": "app.api.routes.admin.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.routes.auth.routes",
        "description": "app.api.routes.auth.routes",
        "isExtraImport": true,
        "detail": "app.api.routes.auth.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.routes.context_fields.routes",
        "description": "app.api.routes.context_fields.routes",
        "isExtraImport": true,
        "detail": "app.api.routes.context_fields.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.routes.feature_flags.routes",
        "description": "app.api.routes.feature_flags.routes",
        "isExtraImport": true,
        "detail": "app.api.routes.feature_flags.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.routes.health.routes",
        "description": "app.api.routes.health.routes",
        "isExtraImport": true,
        "detail": "app.api.routes.health.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.routes.projects.routes",
        "description": "app.api.routes.projects.routes",
        "isExtraImport": true,
        "detail": "app.api.routes.projects.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.routes.users.routes",
        "description": "app.api.routes.users.routes",
        "isExtraImport": true,
        "detail": "app.api.routes.users.routes",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "AsyncAttrs",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "UtcDateTime",
        "importPath": "sqlalchemy_utc",
        "description": "sqlalchemy_utc",
        "isExtraImport": true,
        "detail": "sqlalchemy_utc",
        "documentation": {}
    },
    {
        "label": "UtcDateTime",
        "importPath": "sqlalchemy_utc",
        "description": "sqlalchemy_utc",
        "isExtraImport": true,
        "detail": "sqlalchemy_utc",
        "documentation": {}
    },
    {
        "label": "UtcDateTime",
        "importPath": "sqlalchemy_utc",
        "description": "sqlalchemy_utc",
        "isExtraImport": true,
        "detail": "sqlalchemy_utc",
        "documentation": {}
    },
    {
        "label": "UtcDateTime",
        "importPath": "sqlalchemy_utc",
        "description": "sqlalchemy_utc",
        "isExtraImport": true,
        "detail": "sqlalchemy_utc",
        "documentation": {}
    },
    {
        "label": "UtcDateTime",
        "importPath": "sqlalchemy_utc",
        "description": "sqlalchemy_utc",
        "isExtraImport": true,
        "detail": "sqlalchemy_utc",
        "documentation": {}
    },
    {
        "label": "UtcDateTime",
        "importPath": "sqlalchemy_utc",
        "description": "sqlalchemy_utc",
        "isExtraImport": true,
        "detail": "sqlalchemy_utc",
        "documentation": {}
    },
    {
        "label": "UtcDateTime",
        "importPath": "sqlalchemy_utc",
        "description": "sqlalchemy_utc",
        "isExtraImport": true,
        "detail": "sqlalchemy_utc",
        "documentation": {}
    },
    {
        "label": "UtcDateTime",
        "importPath": "sqlalchemy_utc",
        "description": "sqlalchemy_utc",
        "isExtraImport": true,
        "detail": "sqlalchemy_utc",
        "documentation": {}
    },
    {
        "label": "BaseRow",
        "importPath": "app.services.database.mysql.schemas.base",
        "description": "app.services.database.mysql.schemas.base",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.base",
        "documentation": {}
    },
    {
        "label": "BaseRow",
        "importPath": "app.services.database.mysql.schemas.base",
        "description": "app.services.database.mysql.schemas.base",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.base",
        "documentation": {}
    },
    {
        "label": "BaseRow",
        "importPath": "app.services.database.mysql.schemas.base",
        "description": "app.services.database.mysql.schemas.base",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.base",
        "documentation": {}
    },
    {
        "label": "BaseRow",
        "importPath": "app.services.database.mysql.schemas.base",
        "description": "app.services.database.mysql.schemas.base",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.base",
        "documentation": {}
    },
    {
        "label": "BaseRow",
        "importPath": "app.services.database.mysql.schemas.base",
        "description": "app.services.database.mysql.schemas.base",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.base",
        "documentation": {}
    },
    {
        "label": "BaseRow",
        "importPath": "app.services.database.mysql.schemas.base",
        "description": "app.services.database.mysql.schemas.base",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.base",
        "documentation": {}
    },
    {
        "label": "BaseRow",
        "importPath": "app.services.database.mysql.schemas.base",
        "description": "app.services.database.mysql.schemas.base",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.base",
        "documentation": {}
    },
    {
        "label": "BaseRow",
        "importPath": "app.services.database.mysql.schemas.base",
        "description": "app.services.database.mysql.schemas.base",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.base",
        "documentation": {}
    },
    {
        "label": "BaseRow",
        "importPath": "app.services.database.mysql.schemas.base",
        "description": "app.services.database.mysql.schemas.base",
        "isExtraImport": true,
        "detail": "app.services.database.mysql.schemas.base",
        "documentation": {}
    },
    {
        "label": "BusyLoadingError",
        "importPath": "redis",
        "description": "redis",
        "isExtraImport": true,
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "ConnectionError",
        "importPath": "redis",
        "description": "redis",
        "isExtraImport": true,
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "TimeoutError",
        "importPath": "redis",
        "description": "redis",
        "isExtraImport": true,
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "RedisCluster",
        "importPath": "redis.cluster",
        "description": "redis.cluster",
        "isExtraImport": true,
        "detail": "redis.cluster",
        "documentation": {}
    },
    {
        "label": "ClusterNode",
        "importPath": "redis.cluster",
        "description": "redis.cluster",
        "isExtraImport": true,
        "detail": "redis.cluster",
        "documentation": {}
    },
    {
        "label": "Retry",
        "importPath": "redis.retry",
        "description": "redis.retry",
        "isExtraImport": true,
        "detail": "redis.retry",
        "documentation": {}
    },
    {
        "label": "ExponentialBackoff",
        "importPath": "redis.backoff",
        "description": "redis.backoff",
        "isExtraImport": true,
        "detail": "redis.backoff",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "logging.config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging.config",
        "description": "logging.config",
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "fastapi.openapi.utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fastapi.openapi.utils",
        "description": "fastapi.openapi.utils",
        "detail": "fastapi.openapi.utils",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "APIRoute",
        "importPath": "fastapi.routing",
        "description": "fastapi.routing",
        "isExtraImport": true,
        "detail": "fastapi.routing",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.routers",
        "description": "app.api.routers",
        "isExtraImport": true,
        "detail": "app.api.routers",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Bootstrap",
        "importPath": "app.bootstrap",
        "description": "app.bootstrap",
        "isExtraImport": true,
        "detail": "app.bootstrap",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "TestCaseRunner",
        "importPath": "rest_api_tester.runner",
        "description": "rest_api_tester.runner",
        "isExtraImport": true,
        "detail": "rest_api_tester.runner",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tests.api",
        "description": "tests.api",
        "isExtraImport": true,
        "detail": "tests.api",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "importPath": "tests.api.base_test_case",
        "description": "tests.api.base_test_case",
        "isExtraImport": true,
        "detail": "tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "importPath": "tests.api.fastapi_test_client",
        "description": "tests.api.fastapi_test_client",
        "isExtraImport": true,
        "detail": "tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestData",
        "importPath": "rest_api_tester.test",
        "description": "rest_api_tester.test",
        "isExtraImport": true,
        "detail": "rest_api_tester.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "rest_api_tester.test",
        "description": "rest_api_tester.test",
        "isExtraImport": true,
        "detail": "rest_api_tester.test",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "importPath": "rest_api_tester.test",
        "description": "rest_api_tester.test",
        "isExtraImport": true,
        "detail": "rest_api_tester.test",
        "documentation": {}
    },
    {
        "label": "TestData",
        "importPath": "rest_api_tester.test",
        "description": "rest_api_tester.test",
        "isExtraImport": true,
        "detail": "rest_api_tester.test",
        "documentation": {}
    },
    {
        "label": "BaseTestClient",
        "importPath": "rest_api_tester.client.base_client",
        "description": "rest_api_tester.client.base_client",
        "isExtraImport": true,
        "detail": "rest_api_tester.client.base_client",
        "documentation": {}
    },
    {
        "label": "BaseTestClient",
        "importPath": "rest_api_tester.client.base_client",
        "description": "rest_api_tester.client.base_client",
        "isExtraImport": true,
        "detail": "rest_api_tester.client.base_client",
        "documentation": {}
    },
    {
        "label": "BaseTestClient",
        "importPath": "rest_api_tester.client.base_client",
        "description": "rest_api_tester.client.base_client",
        "isExtraImport": true,
        "detail": "rest_api_tester.client.base_client",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "ResponseData",
        "importPath": "rest_api_tester.client.response_data",
        "description": "rest_api_tester.client.response_data",
        "isExtraImport": true,
        "detail": "rest_api_tester.client.response_data",
        "documentation": {}
    },
    {
        "label": "ResponseData",
        "importPath": "rest_api_tester.client.response_data",
        "description": "rest_api_tester.client.response_data",
        "isExtraImport": true,
        "detail": "rest_api_tester.client.response_data",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "AppException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class AppException(Exception):\n    STATUS: int = status.HTTP_500_INTERNAL_SERVER_ERROR\n    CODE: str = 'UNKNOWN'\n    def __init__(self, message: str | None = None):\n        message = message or StringsService.get(key=self.CODE)\n        super().__init__(message)\nclass NotFoundException(AppException):\n    STATUS: int = status.HTTP_404_NOT_FOUND\n    CODE: str = 'NOT_FOUND'\nclass UnauthenticatedException(AppException):",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class NotFoundException(AppException):\n    STATUS: int = status.HTTP_404_NOT_FOUND\n    CODE: str = 'NOT_FOUND'\nclass UnauthenticatedException(AppException):\n    STATUS: int = status.HTTP_401_UNAUTHORIZED\n    CODE: str = 'UNAUTHENTICATED'\nclass UnauthorizedException(AppException):\n    STATUS: int = status.HTTP_403_FORBIDDEN\n    CODE: str = 'UNAUTHORIZED'\nclass BadRequestException(AppException):",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthenticatedException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class UnauthenticatedException(AppException):\n    STATUS: int = status.HTTP_401_UNAUTHORIZED\n    CODE: str = 'UNAUTHENTICATED'\nclass UnauthorizedException(AppException):\n    STATUS: int = status.HTTP_403_FORBIDDEN\n    CODE: str = 'UNAUTHORIZED'\nclass BadRequestException(AppException):\n    STATUS: int = status.HTTP_400_BAD_REQUEST\nclass BadRequestFieldException(BadRequestException):\n    def __init__(self, field: str, message: str | None = None):",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class UnauthorizedException(AppException):\n    STATUS: int = status.HTTP_403_FORBIDDEN\n    CODE: str = 'UNAUTHORIZED'\nclass BadRequestException(AppException):\n    STATUS: int = status.HTTP_400_BAD_REQUEST\nclass BadRequestFieldException(BadRequestException):\n    def __init__(self, field: str, message: str | None = None):\n        self.field = field\n        super().__init__(message)\nclass AggregateException(BadRequestException):",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequestException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class BadRequestException(AppException):\n    STATUS: int = status.HTTP_400_BAD_REQUEST\nclass BadRequestFieldException(BadRequestException):\n    def __init__(self, field: str, message: str | None = None):\n        self.field = field\n        super().__init__(message)\nclass AggregateException(BadRequestException):\n    def __init__(self, exceptions: list[AppException]):\n        self.exceptions = exceptions\nclass NameTakenException(BadRequestFieldException):",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequestFieldException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class BadRequestFieldException(BadRequestException):\n    def __init__(self, field: str, message: str | None = None):\n        self.field = field\n        super().__init__(message)\nclass AggregateException(BadRequestException):\n    def __init__(self, exceptions: list[AppException]):\n        self.exceptions = exceptions\nclass NameTakenException(BadRequestFieldException):\n    CODE: str = 'NAME_TAKEN'\nclass EmailTakenException(BadRequestFieldException):",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "AggregateException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class AggregateException(BadRequestException):\n    def __init__(self, exceptions: list[AppException]):\n        self.exceptions = exceptions\nclass NameTakenException(BadRequestFieldException):\n    CODE: str = 'NAME_TAKEN'\nclass EmailTakenException(BadRequestFieldException):\n    CODE: str = 'EMAIL_TAKEN'\nclass ContextFieldKeyTakenException(BadRequestFieldException):\n    CODE: str = 'CONTEXT_FIELD_KEY_TAKEN'\nclass InvalidEnumDefException(BadRequestFieldException):",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NameTakenException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class NameTakenException(BadRequestFieldException):\n    CODE: str = 'NAME_TAKEN'\nclass EmailTakenException(BadRequestFieldException):\n    CODE: str = 'EMAIL_TAKEN'\nclass ContextFieldKeyTakenException(BadRequestFieldException):\n    CODE: str = 'CONTEXT_FIELD_KEY_TAKEN'\nclass InvalidEnumDefException(BadRequestFieldException):\n    CODE: str = 'INVALID_ENUM_DEF'\nclass EnumContextFieldTypeWithoutEnumDefException(BadRequestFieldException):\n    CODE: str = 'ENUM_CONTEXT_FIELD_TYPE_WITHOUT_ENUM_DEF'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "EmailTakenException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class EmailTakenException(BadRequestFieldException):\n    CODE: str = 'EMAIL_TAKEN'\nclass ContextFieldKeyTakenException(BadRequestFieldException):\n    CODE: str = 'CONTEXT_FIELD_KEY_TAKEN'\nclass InvalidEnumDefException(BadRequestFieldException):\n    CODE: str = 'INVALID_ENUM_DEF'\nclass EnumContextFieldTypeWithoutEnumDefException(BadRequestFieldException):\n    CODE: str = 'ENUM_CONTEXT_FIELD_TYPE_WITHOUT_ENUM_DEF'\nclass SameContextFieldKeysInAndGroup(BadRequestFieldException):\n    CODE: str = 'SAME_CONTEXT_FIELD_KEYS_IN_AND_GROUP'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "ContextFieldKeyTakenException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class ContextFieldKeyTakenException(BadRequestFieldException):\n    CODE: str = 'CONTEXT_FIELD_KEY_TAKEN'\nclass InvalidEnumDefException(BadRequestFieldException):\n    CODE: str = 'INVALID_ENUM_DEF'\nclass EnumContextFieldTypeWithoutEnumDefException(BadRequestFieldException):\n    CODE: str = 'ENUM_CONTEXT_FIELD_TYPE_WITHOUT_ENUM_DEF'\nclass SameContextFieldKeysInAndGroup(BadRequestFieldException):\n    CODE: str = 'SAME_CONTEXT_FIELD_KEYS_IN_AND_GROUP'\nclass InvalidFeatureFlagConditions(BadRequestFieldException):\n    CODE: str = 'INVALID_FEATURE_FLAG_CONDITIONS'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidEnumDefException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class InvalidEnumDefException(BadRequestFieldException):\n    CODE: str = 'INVALID_ENUM_DEF'\nclass EnumContextFieldTypeWithoutEnumDefException(BadRequestFieldException):\n    CODE: str = 'ENUM_CONTEXT_FIELD_TYPE_WITHOUT_ENUM_DEF'\nclass SameContextFieldKeysInAndGroup(BadRequestFieldException):\n    CODE: str = 'SAME_CONTEXT_FIELD_KEYS_IN_AND_GROUP'\nclass InvalidFeatureFlagConditions(BadRequestFieldException):\n    CODE: str = 'INVALID_FEATURE_FLAG_CONDITIONS'\nclass InvalidProjectException(BadRequestFieldException):\n    CODE: str = 'INVALID_PROJECT'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "EnumContextFieldTypeWithoutEnumDefException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class EnumContextFieldTypeWithoutEnumDefException(BadRequestFieldException):\n    CODE: str = 'ENUM_CONTEXT_FIELD_TYPE_WITHOUT_ENUM_DEF'\nclass SameContextFieldKeysInAndGroup(BadRequestFieldException):\n    CODE: str = 'SAME_CONTEXT_FIELD_KEYS_IN_AND_GROUP'\nclass InvalidFeatureFlagConditions(BadRequestFieldException):\n    CODE: str = 'INVALID_FEATURE_FLAG_CONDITIONS'\nclass InvalidProjectException(BadRequestFieldException):\n    CODE: str = 'INVALID_PROJECT'\nclass InvalidPasswordException(BadRequestFieldException):\n    CODE: str = 'INVALID_PASSWORD'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "SameContextFieldKeysInAndGroup",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class SameContextFieldKeysInAndGroup(BadRequestFieldException):\n    CODE: str = 'SAME_CONTEXT_FIELD_KEYS_IN_AND_GROUP'\nclass InvalidFeatureFlagConditions(BadRequestFieldException):\n    CODE: str = 'INVALID_FEATURE_FLAG_CONDITIONS'\nclass InvalidProjectException(BadRequestFieldException):\n    CODE: str = 'INVALID_PROJECT'\nclass InvalidPasswordException(BadRequestFieldException):\n    CODE: str = 'INVALID_PASSWORD'\nclass InvalidSetPasswordTokenException(BadRequestException):\n    CODE: str = 'INVALID_SET_PASSWORD_TOKEN'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidFeatureFlagConditions",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class InvalidFeatureFlagConditions(BadRequestFieldException):\n    CODE: str = 'INVALID_FEATURE_FLAG_CONDITIONS'\nclass InvalidProjectException(BadRequestFieldException):\n    CODE: str = 'INVALID_PROJECT'\nclass InvalidPasswordException(BadRequestFieldException):\n    CODE: str = 'INVALID_PASSWORD'\nclass InvalidSetPasswordTokenException(BadRequestException):\n    CODE: str = 'INVALID_SET_PASSWORD_TOKEN'\nclass PasswordsDontMatchException(BadRequestException):\n    CODE: str = 'PASSWORDS_DONT_MATCH'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidProjectException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class InvalidProjectException(BadRequestFieldException):\n    CODE: str = 'INVALID_PROJECT'\nclass InvalidPasswordException(BadRequestFieldException):\n    CODE: str = 'INVALID_PASSWORD'\nclass InvalidSetPasswordTokenException(BadRequestException):\n    CODE: str = 'INVALID_SET_PASSWORD_TOKEN'\nclass PasswordsDontMatchException(BadRequestException):\n    CODE: str = 'PASSWORDS_DONT_MATCH'\nclass InvalidLoginCredentialsException(BadRequestException):\n    CODE: str = 'INVALID_LOGIN_CREDENTIALS'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidPasswordException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class InvalidPasswordException(BadRequestFieldException):\n    CODE: str = 'INVALID_PASSWORD'\nclass InvalidSetPasswordTokenException(BadRequestException):\n    CODE: str = 'INVALID_SET_PASSWORD_TOKEN'\nclass PasswordsDontMatchException(BadRequestException):\n    CODE: str = 'PASSWORDS_DONT_MATCH'\nclass InvalidLoginCredentialsException(BadRequestException):\n    CODE: str = 'INVALID_LOGIN_CREDENTIALS'\nclass ContextFieldInUseException(BadRequestException):\n    CODE: str = 'CONTEXT_FIELD_IN_USE'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidSetPasswordTokenException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class InvalidSetPasswordTokenException(BadRequestException):\n    CODE: str = 'INVALID_SET_PASSWORD_TOKEN'\nclass PasswordsDontMatchException(BadRequestException):\n    CODE: str = 'PASSWORDS_DONT_MATCH'\nclass InvalidLoginCredentialsException(BadRequestException):\n    CODE: str = 'INVALID_LOGIN_CREDENTIALS'\nclass ContextFieldInUseException(BadRequestException):\n    CODE: str = 'CONTEXT_FIELD_IN_USE'\nclass NoProjectAssignedException(BadRequestFieldException):\n    CODE: str = 'NO_PROJECT_ASSIGNED'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "PasswordsDontMatchException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class PasswordsDontMatchException(BadRequestException):\n    CODE: str = 'PASSWORDS_DONT_MATCH'\nclass InvalidLoginCredentialsException(BadRequestException):\n    CODE: str = 'INVALID_LOGIN_CREDENTIALS'\nclass ContextFieldInUseException(BadRequestException):\n    CODE: str = 'CONTEXT_FIELD_IN_USE'\nclass NoProjectAssignedException(BadRequestFieldException):\n    CODE: str = 'NO_PROJECT_ASSIGNED'\nclass NoOwnersLeftException(BadRequestException):\n    CODE: str = 'NO_OWNERS_LEFT'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidLoginCredentialsException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class InvalidLoginCredentialsException(BadRequestException):\n    CODE: str = 'INVALID_LOGIN_CREDENTIALS'\nclass ContextFieldInUseException(BadRequestException):\n    CODE: str = 'CONTEXT_FIELD_IN_USE'\nclass NoProjectAssignedException(BadRequestFieldException):\n    CODE: str = 'NO_PROJECT_ASSIGNED'\nclass NoOwnersLeftException(BadRequestException):\n    CODE: str = 'NO_OWNERS_LEFT'\nclass UserNotActivatedException(BadRequestException):\n    CODE: str = 'USER_NOT_ACTIVATED'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "ContextFieldInUseException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class ContextFieldInUseException(BadRequestException):\n    CODE: str = 'CONTEXT_FIELD_IN_USE'\nclass NoProjectAssignedException(BadRequestFieldException):\n    CODE: str = 'NO_PROJECT_ASSIGNED'\nclass NoOwnersLeftException(BadRequestException):\n    CODE: str = 'NO_OWNERS_LEFT'\nclass UserNotActivatedException(BadRequestException):\n    CODE: str = 'USER_NOT_ACTIVATED'\nclass IllegalContextFieldEnumChangeException(BadRequestException):\n    CODE: str = 'ILLEGAL_CONTEXT_FIELD_ENUM_CHANGE'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NoProjectAssignedException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class NoProjectAssignedException(BadRequestFieldException):\n    CODE: str = 'NO_PROJECT_ASSIGNED'\nclass NoOwnersLeftException(BadRequestException):\n    CODE: str = 'NO_OWNERS_LEFT'\nclass UserNotActivatedException(BadRequestException):\n    CODE: str = 'USER_NOT_ACTIVATED'\nclass IllegalContextFieldEnumChangeException(BadRequestException):\n    CODE: str = 'ILLEGAL_CONTEXT_FIELD_ENUM_CHANGE'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NoOwnersLeftException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class NoOwnersLeftException(BadRequestException):\n    CODE: str = 'NO_OWNERS_LEFT'\nclass UserNotActivatedException(BadRequestException):\n    CODE: str = 'USER_NOT_ACTIVATED'\nclass IllegalContextFieldEnumChangeException(BadRequestException):\n    CODE: str = 'ILLEGAL_CONTEXT_FIELD_ENUM_CHANGE'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UserNotActivatedException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class UserNotActivatedException(BadRequestException):\n    CODE: str = 'USER_NOT_ACTIVATED'\nclass IllegalContextFieldEnumChangeException(BadRequestException):\n    CODE: str = 'ILLEGAL_CONTEXT_FIELD_ENUM_CHANGE'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "IllegalContextFieldEnumChangeException",
        "kind": 6,
        "importPath": "admin.app.api.exceptions.exceptions",
        "description": "admin.app.api.exceptions.exceptions",
        "peekOfCode": "class IllegalContextFieldEnumChangeException(BadRequestException):\n    CODE: str = 'ILLEGAL_CONTEXT_FIELD_ENUM_CHANGE'",
        "detail": "admin.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "exception_handler",
        "kind": 2,
        "importPath": "admin.app.api.exceptions.handlers",
        "description": "admin.app.api.exceptions.handlers",
        "peekOfCode": "def exception_handler(_: Request, __: Exception) -> JSONResponse:\n    return JSONResponse(\n        status_code=500,\n        content={\n            'errors': [\n                {\n                    'code': AppException.CODE,\n                    'msg': StringsService.get(key=AppException.CODE)\n                }\n            ]",
        "detail": "admin.app.api.exceptions.handlers",
        "documentation": {}
    },
    {
        "label": "app_exception_handler",
        "kind": 2,
        "importPath": "admin.app.api.exceptions.handlers",
        "description": "admin.app.api.exceptions.handlers",
        "peekOfCode": "def app_exception_handler(_: Request, e: AppException) -> JSONResponse:\n    errors = []\n    exceptions = e.exceptions if isinstance(e, AggregateException) else [e]\n    for exc in exceptions:\n        if isinstance(exc, BadRequestFieldException):\n            errors.append({\n                'field': exc.field,\n                'code': exc.CODE,\n                'message': str(exc)\n            })",
        "detail": "admin.app.api.exceptions.handlers",
        "documentation": {}
    },
    {
        "label": "request_validation_exception_handler",
        "kind": 2,
        "importPath": "admin.app.api.exceptions.handlers",
        "description": "admin.app.api.exceptions.handlers",
        "peekOfCode": "def request_validation_exception_handler(_: Request, e: RequestValidationError) -> JSONResponse:\n    # TODO: Handle i18n\n    formatted_errors = []\n    for error in e.errors():\n        error_code, message = error['type'], error['msg']\n        field = error['loc'][1]\n        message = _make_user_friendly(error_code=error_code, field=field, message=message)\n        formatted_errors.append({\n            'field': field,\n            'code': error_code.upper(),",
        "detail": "admin.app.api.exceptions.handlers",
        "documentation": {}
    },
    {
        "label": "jwt_exception_handler",
        "kind": 2,
        "importPath": "admin.app.api.exceptions.handlers",
        "description": "admin.app.api.exceptions.handlers",
        "peekOfCode": "def jwt_exception_handler(_: Request, __: AuthJWTException) -> JSONResponse:\n    return JSONResponse(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        content={\n            'errors': [{\n                'code': UnauthenticatedException.CODE,\n                'message': StringsService.get(key=AppException.CODE)\n            }]\n        }\n    )",
        "detail": "admin.app.api.exceptions.handlers",
        "documentation": {}
    },
    {
        "label": "GetAuditLogsController",
        "kind": 6,
        "importPath": "admin.app.api.routes.admin.controllers.get_audit_logs",
        "description": "admin.app.api.routes.admin.controllers.get_audit_logs",
        "peekOfCode": "class GetAuditLogsController:\n    def __init__(self, page: int, page_size: int, me: User):\n        self.me = me\n        self.page = page\n        self.page_size = page_size\n    def handle_request(self) -> SystemAuditLogs:\n        if not self.me.role.has_permission(Permission.READ_SYSTEM_AUDIT_LOGS):\n            raise UnauthorizedException\n        with MySQLService.get_session() as session:\n            rows, total_count = SystemAuditLogsTable.get_system_audit_logs(",
        "detail": "admin.app.api.routes.admin.controllers.get_audit_logs",
        "documentation": {}
    },
    {
        "label": "get_audit_logs",
        "kind": 2,
        "importPath": "admin.app.api.routes.admin.routes",
        "description": "admin.app.api.routes.admin.routes",
        "peekOfCode": "def get_audit_logs(\n    page: int = 0,\n    page_size: int = 100,\n    me: User = Depends(auth.get_user)\n) -> SystemAuditLogs:\n    return GetAuditLogsController(\n        page=page,\n        page_size=page_size,\n        me=me\n    ).handle_request()",
        "detail": "admin.app.api.routes.admin.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "admin.app.api.routes.admin.routes",
        "description": "admin.app.api.routes.admin.routes",
        "peekOfCode": "router = APIRouter(\n    prefix='/admin',\n    tags=['Admin']\n)\n@router.get('/audit_logs', response_model=SystemAuditLogs)\ndef get_audit_logs(\n    page: int = 0,\n    page_size: int = 100,\n    me: User = Depends(auth.get_user)\n) -> SystemAuditLogs:",
        "detail": "admin.app.api.routes.admin.routes",
        "documentation": {}
    },
    {
        "label": "SystemAuditLog",
        "kind": 6,
        "importPath": "admin.app.api.routes.admin.schemas",
        "description": "admin.app.api.routes.admin.schemas",
        "peekOfCode": "class SystemAuditLog(BaseModel):\n    actor: EmailStr\n    event_time: datetime\n    event_type: str\n    details: str | None\nclass SystemAuditLogs(BaseModel):\n    items: list[SystemAuditLog]\n    total: int",
        "detail": "admin.app.api.routes.admin.schemas",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogs",
        "kind": 6,
        "importPath": "admin.app.api.routes.admin.schemas",
        "description": "admin.app.api.routes.admin.schemas",
        "peekOfCode": "class SystemAuditLogs(BaseModel):\n    items: list[SystemAuditLog]\n    total: int",
        "detail": "admin.app.api.routes.admin.schemas",
        "documentation": {}
    },
    {
        "label": "LoginController",
        "kind": 6,
        "importPath": "admin.app.api.routes.auth.controllers.login",
        "description": "admin.app.api.routes.auth.controllers.login",
        "peekOfCode": "class LoginController:\n    def __init__(self, email: str, password: str, authorize: AuthJWT) -> None:\n        self.email = email\n        self.password = password\n        self.authorize = authorize\n    def handle_request(self) -> RedirectResponse:\n        access_token: str\n        try:\n            with MySQLService.get_session() as session:\n                user = UsersTable.get_user_by_email(email=self.email, session=session)",
        "detail": "admin.app.api.routes.auth.controllers.login",
        "documentation": {}
    },
    {
        "label": "LogoutController",
        "kind": 6,
        "importPath": "admin.app.api.routes.auth.controllers.logout",
        "description": "admin.app.api.routes.auth.controllers.logout",
        "peekOfCode": "class LogoutController:\n    @staticmethod\n    def handle_request() -> RedirectResponse:\n        response = RedirectResponse(url=f'{Config.UI_BASE_URL}/login', status_code=status.HTTP_302_FOUND)\n        response.delete_cookie(key=Config.SESSION_COOKIE_KEY)\n        return response",
        "detail": "admin.app.api.routes.auth.controllers.logout",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "admin.app.api.routes.auth.routes",
        "description": "admin.app.api.routes.auth.routes",
        "peekOfCode": "def login(email: str = Form(), password: str = Form(), authorize: AuthJWT = Depends()) -> RedirectResponse:\n    return LoginController(\n        email=email,\n        password=password,\n        authorize=authorize\n    ).handle_request()\n@router.post('/login/test', response_model=SuccessResponse)\ndef login_test(authorize: AuthJWT = Depends()) -> Any:\n    authorize.jwt_required()\n    return SuccessResponse(success=True)",
        "detail": "admin.app.api.routes.auth.routes",
        "documentation": {}
    },
    {
        "label": "login_test",
        "kind": 2,
        "importPath": "admin.app.api.routes.auth.routes",
        "description": "admin.app.api.routes.auth.routes",
        "peekOfCode": "def login_test(authorize: AuthJWT = Depends()) -> Any:\n    authorize.jwt_required()\n    return SuccessResponse(success=True)\n@router.get('/logout', response_class=RedirectResponse)\ndef logout() -> Any:\n    return LogoutController().handle_request()",
        "detail": "admin.app.api.routes.auth.routes",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "admin.app.api.routes.auth.routes",
        "description": "admin.app.api.routes.auth.routes",
        "peekOfCode": "def logout() -> Any:\n    return LogoutController().handle_request()",
        "detail": "admin.app.api.routes.auth.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "admin.app.api.routes.auth.routes",
        "description": "admin.app.api.routes.auth.routes",
        "peekOfCode": "router = APIRouter(\n    prefix='/auth',\n    tags=['Auth']\n)\n@router.post('/login', response_class=RedirectResponse)\ndef login(email: str = Form(), password: str = Form(), authorize: AuthJWT = Depends()) -> RedirectResponse:\n    return LoginController(\n        email=email,\n        password=password,\n        authorize=authorize",
        "detail": "admin.app.api.routes.auth.routes",
        "documentation": {}
    },
    {
        "label": "validate_enum_def",
        "kind": 2,
        "importPath": "admin.app.api.routes.context_fields.controllers.common",
        "description": "admin.app.api.routes.context_fields.controllers.common",
        "peekOfCode": "def validate_enum_def(\n    enum_def: dict[str, Any] | None\n) -> None:\n    if enum_def is None:\n        return\n    if not enum_def:\n        raise InvalidEnumDefException(field='enum_def')\n    value_types = {type(value) for value in enum_def.values()}\n    if len(value_types) > 1:\n        raise InvalidEnumDefException(field='enum_def')",
        "detail": "admin.app.api.routes.context_fields.controllers.common",
        "documentation": {}
    },
    {
        "label": "CreateContextFieldController",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.controllers.create_context_field",
        "description": "admin.app.api.routes.context_fields.controllers.create_context_field",
        "peekOfCode": "class CreateContextFieldController:\n    def __init__(self, project_id: int, request: CreateContextField, me: User):\n        self.project_id = project_id\n        self.request = request\n        self.me = me\n    def handle_request(self) -> ContextField:\n        self._validate()\n        context_field_row = self._create_context_field()\n        return ContextField.from_row(row=context_field_row)\n    def _validate(self) -> None:",
        "detail": "admin.app.api.routes.context_fields.controllers.create_context_field",
        "documentation": {}
    },
    {
        "label": "DeleteContextFieldController",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.controllers.delete_context_field",
        "description": "admin.app.api.routes.context_fields.controllers.delete_context_field",
        "peekOfCode": "class DeleteContextFieldController:\n    def __init__(self, project_id: int, context_field_id: int, me: User):\n        self.project_id = project_id\n        self.context_field_id = context_field_id\n        self.me = me\n    def handle_request(self) -> SuccessResponse:\n        context_field_row = self._validate()\n        self._delete_context_field(context_field_row=context_field_row)\n        return SuccessResponse()\n    def _validate(self) -> ContextFieldRow:",
        "detail": "admin.app.api.routes.context_fields.controllers.delete_context_field",
        "documentation": {}
    },
    {
        "label": "GetContextFieldController",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.controllers.get_context_field",
        "description": "admin.app.api.routes.context_fields.controllers.get_context_field",
        "peekOfCode": "class GetContextFieldController:\n    def __init__(self, project_id: int, context_field_id: int):\n        self.project_id = project_id\n        self.context_field_id = context_field_id\n    def handle_request(self) -> ContextField:\n        with MySQLService.get_session() as session:\n            context_field_row = session.get(ContextFieldRow, self.context_field_id)\n        if not context_field_row:\n            raise NotFoundException\n        return ContextField.from_row(row=context_field_row)",
        "detail": "admin.app.api.routes.context_fields.controllers.get_context_field",
        "documentation": {}
    },
    {
        "label": "GetContextFieldAuditLogsController",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.controllers.get_context_field_audit_logs",
        "description": "admin.app.api.routes.context_fields.controllers.get_context_field_audit_logs",
        "peekOfCode": "class GetContextFieldAuditLogsController:\n    def __init__(self, project_id: int, context_field_id: int, page: int, page_size: int, me: User):\n        self.project_id = project_id\n        self.context_field_id = context_field_id\n        self.page = page\n        self.page_size = page_size\n        self.me = me\n    def handle_request(self) -> ContextFieldAuditLogs:\n        if not self.me.role.has_permission(Permission.READ_CONTEXT_FIELD_AUDIT_LOGS):\n            raise UnauthorizedException",
        "detail": "admin.app.api.routes.context_fields.controllers.get_context_field_audit_logs",
        "documentation": {}
    },
    {
        "label": "GetContextFieldsController",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.controllers.get_context_fields",
        "description": "admin.app.api.routes.context_fields.controllers.get_context_fields",
        "peekOfCode": "class GetContextFieldsController:\n    def __init__(self, project_id: int, page: int, page_size: int) -> None:\n        self.project_id = project_id\n        self.page = page\n        self.page_size = page_size\n    def handle_request(self) -> ContextFields:\n        with MySQLService.get_session() as session:\n            context_field_rows, total_count = ContextFieldsTable.get_context_fields(\n                project_id=self.project_id, page=self.page, page_size=self.page_size, session=session)\n        context_fields = [",
        "detail": "admin.app.api.routes.context_fields.controllers.get_context_fields",
        "documentation": {}
    },
    {
        "label": "UpdateContextFieldController",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.controllers.update_context_field",
        "description": "admin.app.api.routes.context_fields.controllers.update_context_field",
        "peekOfCode": "class UpdateContextFieldController:\n    def __init__(self, project_id: int, context_field_id: int, request: UpdateContextField, me: User):\n        self.project_id = project_id\n        self.context_field_id = context_field_id\n        self.request = request\n        self.me = me\n    def handle_request(self) -> ContextField:\n        self._validate()\n        context_field_row = self._update_context_field()\n        return ContextField.from_row(row=context_field_row)",
        "detail": "admin.app.api.routes.context_fields.controllers.update_context_field",
        "documentation": {}
    },
    {
        "label": "get_context_fields",
        "kind": 2,
        "importPath": "admin.app.api.routes.context_fields.routes",
        "description": "admin.app.api.routes.context_fields.routes",
        "peekOfCode": "def get_context_fields(\n    project_id: int,\n    page: int = 0,\n    page_size: int = DEFAULT_PAGE_SIZE\n) -> ContextFields:\n    return GetContextFieldsController(\n        project_id=project_id,\n        page=page,\n        page_size=page_size\n    ).handle_request()",
        "detail": "admin.app.api.routes.context_fields.routes",
        "documentation": {}
    },
    {
        "label": "create_context_field",
        "kind": 2,
        "importPath": "admin.app.api.routes.context_fields.routes",
        "description": "admin.app.api.routes.context_fields.routes",
        "peekOfCode": "def create_context_field(\n    project_id: int,\n    request: CreateContextField,\n    me: User = Depends(auth.get_user)\n) -> ContextField:\n    return CreateContextFieldController(\n        project_id=project_id,\n        request=request,\n        me=me\n    ).handle_request()",
        "detail": "admin.app.api.routes.context_fields.routes",
        "documentation": {}
    },
    {
        "label": "get_context_field",
        "kind": 2,
        "importPath": "admin.app.api.routes.context_fields.routes",
        "description": "admin.app.api.routes.context_fields.routes",
        "peekOfCode": "def get_context_field(project_id: int, context_field_id: int) -> ContextField:\n    return GetContextFieldController(\n        project_id=project_id,\n        context_field_id=context_field_id\n    ).handle_request()\n@router.put('/{context_field_id}', response_model=ContextField)\ndef update_context_field(\n    project_id: int,\n    context_field_id: int,\n    request: UpdateContextField,",
        "detail": "admin.app.api.routes.context_fields.routes",
        "documentation": {}
    },
    {
        "label": "update_context_field",
        "kind": 2,
        "importPath": "admin.app.api.routes.context_fields.routes",
        "description": "admin.app.api.routes.context_fields.routes",
        "peekOfCode": "def update_context_field(\n    project_id: int,\n    context_field_id: int,\n    request: UpdateContextField,\n    me: User = Depends(auth.get_user)\n) -> ContextField:\n    return UpdateContextFieldController(\n        project_id=project_id,\n        context_field_id=context_field_id,\n        request=request,",
        "detail": "admin.app.api.routes.context_fields.routes",
        "documentation": {}
    },
    {
        "label": "delete_context_field",
        "kind": 2,
        "importPath": "admin.app.api.routes.context_fields.routes",
        "description": "admin.app.api.routes.context_fields.routes",
        "peekOfCode": "def delete_context_field(\n    project_id: int,\n    context_field_id: int,\n    me: User = Depends(auth.get_user)\n) -> SuccessResponse:\n    return DeleteContextFieldController(\n        project_id=project_id,\n        context_field_id=context_field_id,\n        me=me\n    ).handle_request()",
        "detail": "admin.app.api.routes.context_fields.routes",
        "documentation": {}
    },
    {
        "label": "get_context_field_audit_logs",
        "kind": 2,
        "importPath": "admin.app.api.routes.context_fields.routes",
        "description": "admin.app.api.routes.context_fields.routes",
        "peekOfCode": "def get_context_field_audit_logs(\n    project_id: int,\n    context_field_id: int,\n    page: int = 0,\n    page_size: int = 100,\n    me: User = Depends(auth.get_user)\n) -> ContextFieldAuditLogs:\n    return GetContextFieldAuditLogsController(\n        project_id=project_id,\n        context_field_id=context_field_id,",
        "detail": "admin.app.api.routes.context_fields.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "admin.app.api.routes.context_fields.routes",
        "description": "admin.app.api.routes.context_fields.routes",
        "peekOfCode": "router = APIRouter(\n    prefix='/context_fields',\n    tags=['Context Fields']\n)\n@router.get('', response_model=ContextFields)\ndef get_context_fields(\n    project_id: int,\n    page: int = 0,\n    page_size: int = DEFAULT_PAGE_SIZE\n) -> ContextFields:",
        "detail": "admin.app.api.routes.context_fields.routes",
        "documentation": {}
    },
    {
        "label": "ContextField",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.schemas",
        "description": "admin.app.api.routes.context_fields.schemas",
        "peekOfCode": "class ContextField(BaseModel):\n    context_field_id: int\n    name: str\n    field_key: str\n    value_type: ContextValueType = Field(description=utils.get_enum_description(enum=ContextValueType))\n    description: str\n    enum_def: dict[str, Any] | None\n    created_date: datetime\n    updated_date: datetime\n    @classmethod",
        "detail": "admin.app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextFields",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.schemas",
        "description": "admin.app.api.routes.context_fields.schemas",
        "peekOfCode": "class ContextFields(BaseModel):\n    items: list[ContextField]\n    total: int\nclass CreateContextField(BaseModel):\n    name: str = Field(min_length=1, max_length=128)\n    field_key: str = Field(min_length=1, max_length=64)\n    value_type: ContextValueType = Field(description=utils.get_enum_description(enum=ContextValueType))\n    description: str = Field(default='', max_length=256)\n    enum_def: dict[str, Any] | None = None\n    model_config = ConfigDict(",
        "detail": "admin.app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "CreateContextField",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.schemas",
        "description": "admin.app.api.routes.context_fields.schemas",
        "peekOfCode": "class CreateContextField(BaseModel):\n    name: str = Field(min_length=1, max_length=128)\n    field_key: str = Field(min_length=1, max_length=64)\n    value_type: ContextValueType = Field(description=utils.get_enum_description(enum=ContextValueType))\n    description: str = Field(default='', max_length=256)\n    enum_def: dict[str, Any] | None = None\n    model_config = ConfigDict(\n        str_strip_whitespace=True\n    )\nclass UpdateContextField(BaseModel):",
        "detail": "admin.app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "UpdateContextField",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.schemas",
        "description": "admin.app.api.routes.context_fields.schemas",
        "peekOfCode": "class UpdateContextField(BaseModel):\n    name: str = Field(min_length=1, max_length=128)\n    description: str = Field(default='', max_length=256)\n    enum_def: dict[str, Any] | None = None\n    model_config = ConfigDict(\n        str_strip_whitespace=True\n    )\nclass ContextFieldChange(BaseModel):\n    field: str\n    old: str | None",
        "detail": "admin.app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextFieldChange",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.schemas",
        "description": "admin.app.api.routes.context_fields.schemas",
        "peekOfCode": "class ContextFieldChange(BaseModel):\n    field: str\n    old: str | None\n    new: str | None\nclass ContextFieldAuditLog(BaseModel):\n    actor: EmailStr\n    event_time: datetime\n    changes: list[ContextFieldChange]\nclass ContextFieldAuditLogs(BaseModel):\n    items: list[ContextFieldAuditLog]",
        "detail": "admin.app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextFieldAuditLog",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.schemas",
        "description": "admin.app.api.routes.context_fields.schemas",
        "peekOfCode": "class ContextFieldAuditLog(BaseModel):\n    actor: EmailStr\n    event_time: datetime\n    changes: list[ContextFieldChange]\nclass ContextFieldAuditLogs(BaseModel):\n    items: list[ContextFieldAuditLog]\n    total: int",
        "detail": "admin.app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "ContextFieldAuditLogs",
        "kind": 6,
        "importPath": "admin.app.api.routes.context_fields.schemas",
        "description": "admin.app.api.routes.context_fields.schemas",
        "peekOfCode": "class ContextFieldAuditLogs(BaseModel):\n    items: list[ContextFieldAuditLog]\n    total: int",
        "detail": "admin.app.api.routes.context_fields.schemas",
        "documentation": {}
    },
    {
        "label": "validate_feature_flag_conditions",
        "kind": 2,
        "importPath": "admin.app.api.routes.feature_flags.controllers.common",
        "description": "admin.app.api.routes.feature_flags.controllers.common",
        "peekOfCode": "def validate_feature_flag_conditions(\n    project_id: int,\n    conditions: list[list[FeatureFlagCondition]],\n    session: Session\n) -> None:\n    if not conditions:\n        return\n    context_fields_by_key = _get_context_fields_by_field_key(project_id=project_id, session=session)\n    if not context_fields_by_key:\n        # There are conditions but no context fields defined",
        "detail": "admin.app.api.routes.feature_flags.controllers.common",
        "documentation": {}
    },
    {
        "label": "CreateFeatureFlagController",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.controllers.create_feature_flag",
        "description": "admin.app.api.routes.feature_flags.controllers.create_feature_flag",
        "peekOfCode": "class CreateFeatureFlagController:\n    def __init__(self, project_id: int, request: CreateOrUpdateFeatureFlag, me: User):\n        self.project_id = project_id\n        self.request = request\n        self.me = me\n    def handle_request(self) -> FeatureFlag:\n        self._validate()\n        feature_flag_row = self._create_feature_flag()\n        return FeatureFlag.from_row(row=feature_flag_row)\n    def _validate(self) -> None:",
        "detail": "admin.app.api.routes.feature_flags.controllers.create_feature_flag",
        "documentation": {}
    },
    {
        "label": "DeleteFeatureFlagController",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.controllers.delete_feature_flag",
        "description": "admin.app.api.routes.feature_flags.controllers.delete_feature_flag",
        "peekOfCode": "class DeleteFeatureFlagController:\n    def __init__(self, project_id: int, feature_flag_id: int, me: User):\n        self.project_id = project_id\n        self.feature_flag_id = feature_flag_id\n        self.me = me\n    def handle_request(self) -> SuccessResponse:\n        name = self._validate()\n        self._delete_feature_flag(name=name)\n        return SuccessResponse()\n    def _validate(self) -> str:",
        "detail": "admin.app.api.routes.feature_flags.controllers.delete_feature_flag",
        "documentation": {}
    },
    {
        "label": "GetFeatureFlagController",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.controllers.get_feature_flag",
        "description": "admin.app.api.routes.feature_flags.controllers.get_feature_flag",
        "peekOfCode": "class GetFeatureFlagController:\n    def __init__(self, project_id: int, feature_flag_id: int):\n        self.project_id = project_id\n        self.feature_flag_id = feature_flag_id\n    def handle_request(self) -> FeatureFlag:\n        with MySQLService.get_session() as session:\n            feature_flag_row = session.get(FeatureFlagRow, self.feature_flag_id)\n        if not feature_flag_row:\n            raise NotFoundException\n        return FeatureFlag.from_row(row=feature_flag_row)",
        "detail": "admin.app.api.routes.feature_flags.controllers.get_feature_flag",
        "documentation": {}
    },
    {
        "label": "GetFeatureFlagAuditLogsController",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.controllers.get_feature_flag_audit_logs",
        "description": "admin.app.api.routes.feature_flags.controllers.get_feature_flag_audit_logs",
        "peekOfCode": "class GetFeatureFlagAuditLogsController:\n    def __init__(self, project_id: int, feature_flag_id: int, page: int, page_size: int, me: User):\n        self.project_id = project_id\n        self.feature_flag_id = feature_flag_id\n        self.page = page\n        self.page_size = page_size\n        self.me = me\n    def handle_request(self) -> FeatureFlagAuditLogs:\n        with MySQLService.get_session() as session:\n            audit_logs, total_count = FeatureFlagAuditLogsTable.get_feature_flag_audit_logs(",
        "detail": "admin.app.api.routes.feature_flags.controllers.get_feature_flag_audit_logs",
        "documentation": {}
    },
    {
        "label": "GetFeatureFlagsController",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.controllers.get_feature_flags",
        "description": "admin.app.api.routes.feature_flags.controllers.get_feature_flags",
        "peekOfCode": "class GetFeatureFlagsController:\n    def __init__(self, project_id: int, page: int, page_size: int) -> None:\n        self.project_id = project_id\n        self.page = page\n        self.page_size = page_size\n    def handle_request(self) -> FeatureFlags:\n        with MySQLService.get_session() as session:\n            feature_flag_rows, total_count = FeatureFlagsTable.get_feature_flags(\n                project_id=self.project_id, page=self.page, page_size=self.page_size, session=session\n            )",
        "detail": "admin.app.api.routes.feature_flags.controllers.get_feature_flags",
        "documentation": {}
    },
    {
        "label": "UpdateFeatureFlagController",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.controllers.update_feature_flag",
        "description": "admin.app.api.routes.feature_flags.controllers.update_feature_flag",
        "peekOfCode": "class UpdateFeatureFlagController:\n    def __init__(self, project_id: int, feature_flag_id: int, request: CreateOrUpdateFeatureFlag, me: User):\n        self.project_id = project_id\n        self.feature_flag_id = feature_flag_id\n        self.request = request\n        self.me = me\n    def handle_request(self) -> FeatureFlag:\n        self._validate()\n        feature_flag_row = self._update_feature_flag()\n        return FeatureFlag.from_row(row=feature_flag_row)",
        "detail": "admin.app.api.routes.feature_flags.controllers.update_feature_flag",
        "documentation": {}
    },
    {
        "label": "UpdateFeatureFlagStatusController",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.controllers.update_feature_flag_status",
        "description": "admin.app.api.routes.feature_flags.controllers.update_feature_flag_status",
        "peekOfCode": "class UpdateFeatureFlagStatusController:\n    def __init__(self, project_id: int, feature_flag_id: int, request: UpdateFeatureFlagStatus, me: User):\n        self.project_id = project_id\n        self.feature_flag_id = feature_flag_id\n        self.request = request\n        self.me = me\n    def handle_request(self) -> SuccessResponse:\n        if (not self.me.role.has_permission(Permission.UPDATE_FEATURE_FLAG) or\n                self.project_id not in self.me.projects):\n            raise UnauthorizedException",
        "detail": "admin.app.api.routes.feature_flags.controllers.update_feature_flag_status",
        "documentation": {}
    },
    {
        "label": "get_feature_flags",
        "kind": 2,
        "importPath": "admin.app.api.routes.feature_flags.routes",
        "description": "admin.app.api.routes.feature_flags.routes",
        "peekOfCode": "def get_feature_flags(\n    project_id: int,\n    page: int = 0,\n    page_size: int = DEFAULT_PAGE_SIZE\n) -> FeatureFlags:\n    return GetFeatureFlagsController(\n        project_id=project_id,\n        page=page,\n        page_size=page_size\n    ).handle_request()",
        "detail": "admin.app.api.routes.feature_flags.routes",
        "documentation": {}
    },
    {
        "label": "create_feature_flag",
        "kind": 2,
        "importPath": "admin.app.api.routes.feature_flags.routes",
        "description": "admin.app.api.routes.feature_flags.routes",
        "peekOfCode": "def create_feature_flag(\n    project_id: int,\n    request: CreateOrUpdateFeatureFlag,\n    me: User = Depends(auth.get_user)\n) -> FeatureFlag:\n    return CreateFeatureFlagController(\n        project_id=project_id,\n        request=request,\n        me=me\n    ).handle_request()",
        "detail": "admin.app.api.routes.feature_flags.routes",
        "documentation": {}
    },
    {
        "label": "get_feature_flag",
        "kind": 2,
        "importPath": "admin.app.api.routes.feature_flags.routes",
        "description": "admin.app.api.routes.feature_flags.routes",
        "peekOfCode": "def get_feature_flag(project_id: int, feature_flag_id: int) -> FeatureFlag:\n    return GetFeatureFlagController(\n        project_id=project_id,\n        feature_flag_id=feature_flag_id\n    ).handle_request()\n@router.put('/{feature_flag_id}', response_model=FeatureFlag)\ndef update_feature_flag(\n    project_id: int,\n    feature_flag_id: int,\n    request: CreateOrUpdateFeatureFlag,",
        "detail": "admin.app.api.routes.feature_flags.routes",
        "documentation": {}
    },
    {
        "label": "update_feature_flag",
        "kind": 2,
        "importPath": "admin.app.api.routes.feature_flags.routes",
        "description": "admin.app.api.routes.feature_flags.routes",
        "peekOfCode": "def update_feature_flag(\n    project_id: int,\n    feature_flag_id: int,\n    request: CreateOrUpdateFeatureFlag,\n    me: User = Depends(auth.get_user)\n) -> FeatureFlag:\n    return UpdateFeatureFlagController(\n        project_id=project_id,\n        feature_flag_id=feature_flag_id,\n        request=request,",
        "detail": "admin.app.api.routes.feature_flags.routes",
        "documentation": {}
    },
    {
        "label": "delete_feature_flag",
        "kind": 2,
        "importPath": "admin.app.api.routes.feature_flags.routes",
        "description": "admin.app.api.routes.feature_flags.routes",
        "peekOfCode": "def delete_feature_flag(\n    project_id: int,\n    feature_flag_id: int,\n    me: User = Depends(auth.get_user)\n) -> SuccessResponse:\n    return DeleteFeatureFlagController(\n        project_id=project_id,\n        feature_flag_id=feature_flag_id,\n        me=me\n    ).handle_request()",
        "detail": "admin.app.api.routes.feature_flags.routes",
        "documentation": {}
    },
    {
        "label": "get_feature_flag_audit_logs",
        "kind": 2,
        "importPath": "admin.app.api.routes.feature_flags.routes",
        "description": "admin.app.api.routes.feature_flags.routes",
        "peekOfCode": "def get_feature_flag_audit_logs(\n    project_id: int,\n    feature_flag_id: int,\n    page: int = 0,\n    page_size: int = 100,\n    me: User = Depends(auth.get_user)\n) -> FeatureFlagAuditLogs:\n    return GetFeatureFlagAuditLogsController(\n        project_id=project_id,\n        feature_flag_id=feature_flag_id,",
        "detail": "admin.app.api.routes.feature_flags.routes",
        "documentation": {}
    },
    {
        "label": "update_feature_flag_status",
        "kind": 2,
        "importPath": "admin.app.api.routes.feature_flags.routes",
        "description": "admin.app.api.routes.feature_flags.routes",
        "peekOfCode": "def update_feature_flag_status(\n    project_id: int,\n    feature_flag_id: int,\n    request: UpdateFeatureFlagStatus,\n    me: User = Depends(auth.get_user)\n) -> SuccessResponse:\n    return UpdateFeatureFlagStatusController(\n        project_id=project_id,\n        feature_flag_id=feature_flag_id,\n        request=request,",
        "detail": "admin.app.api.routes.feature_flags.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "admin.app.api.routes.feature_flags.routes",
        "description": "admin.app.api.routes.feature_flags.routes",
        "peekOfCode": "router = APIRouter(\n    prefix='/feature_flags',\n    tags=['Feature Flags']\n)\n@router.get('', response_model=FeatureFlags)\ndef get_feature_flags(\n    project_id: int,\n    page: int = 0,\n    page_size: int = DEFAULT_PAGE_SIZE\n) -> FeatureFlags:",
        "detail": "admin.app.api.routes.feature_flags.routes",
        "documentation": {}
    },
    {
        "label": "FeatureFlagCondition",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.schemas",
        "description": "admin.app.api.routes.feature_flags.schemas",
        "peekOfCode": "class FeatureFlagCondition(BaseModel):\n    context_key: str\n    operator: Operator = Field(description=utils.get_enum_description(enum=Operator))\n    value: Any\n    model_config = ConfigDict(\n        str_strip_whitespace=True\n    )\nclass FeatureFlag(BaseModel):\n    feature_flag_id: int\n    name: str",
        "detail": "admin.app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlag",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.schemas",
        "description": "admin.app.api.routes.feature_flags.schemas",
        "peekOfCode": "class FeatureFlag(BaseModel):\n    feature_flag_id: int\n    name: str\n    description: str\n    enabled: bool\n    conditions: list[list[FeatureFlagCondition]]\n    created_date: datetime\n    updated_date: datetime\n    @classmethod\n    def from_row(cls, row: FeatureFlagRow) -> 'FeatureFlag':",
        "detail": "admin.app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlags",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.schemas",
        "description": "admin.app.api.routes.feature_flags.schemas",
        "peekOfCode": "class FeatureFlags(BaseModel):\n    items: list[FeatureFlag]\n    total: int\nclass CreateOrUpdateFeatureFlag(BaseModel):\n    name: str = Field(min_length=1, max_length=128)\n    description: str = Field(default='', max_length=256)\n    enabled: bool\n    conditions: list[list[FeatureFlagCondition]] = Field(default=[])\n    model_config = ConfigDict(\n        str_strip_whitespace=True",
        "detail": "admin.app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "CreateOrUpdateFeatureFlag",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.schemas",
        "description": "admin.app.api.routes.feature_flags.schemas",
        "peekOfCode": "class CreateOrUpdateFeatureFlag(BaseModel):\n    name: str = Field(min_length=1, max_length=128)\n    description: str = Field(default='', max_length=256)\n    enabled: bool\n    conditions: list[list[FeatureFlagCondition]] = Field(default=[])\n    model_config = ConfigDict(\n        str_strip_whitespace=True\n    )\nclass UpdateFeatureFlagStatus(BaseModel):\n    enabled: bool",
        "detail": "admin.app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "UpdateFeatureFlagStatus",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.schemas",
        "description": "admin.app.api.routes.feature_flags.schemas",
        "peekOfCode": "class UpdateFeatureFlagStatus(BaseModel):\n    enabled: bool\nclass FeatureFlagChange(BaseModel):\n    field: str\n    old: str | None\n    new: str\nclass FeatureFlagAuditLog(BaseModel):\n    actor: EmailStr\n    event_time: datetime\n    changes: list[FeatureFlagChange]",
        "detail": "admin.app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlagChange",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.schemas",
        "description": "admin.app.api.routes.feature_flags.schemas",
        "peekOfCode": "class FeatureFlagChange(BaseModel):\n    field: str\n    old: str | None\n    new: str\nclass FeatureFlagAuditLog(BaseModel):\n    actor: EmailStr\n    event_time: datetime\n    changes: list[FeatureFlagChange]\nclass FeatureFlagAuditLogs(BaseModel):\n    items: list[FeatureFlagAuditLog]",
        "detail": "admin.app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlagAuditLog",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.schemas",
        "description": "admin.app.api.routes.feature_flags.schemas",
        "peekOfCode": "class FeatureFlagAuditLog(BaseModel):\n    actor: EmailStr\n    event_time: datetime\n    changes: list[FeatureFlagChange]\nclass FeatureFlagAuditLogs(BaseModel):\n    items: list[FeatureFlagAuditLog]\n    total: int",
        "detail": "admin.app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "FeatureFlagAuditLogs",
        "kind": 6,
        "importPath": "admin.app.api.routes.feature_flags.schemas",
        "description": "admin.app.api.routes.feature_flags.schemas",
        "peekOfCode": "class FeatureFlagAuditLogs(BaseModel):\n    items: list[FeatureFlagAuditLog]\n    total: int",
        "detail": "admin.app.api.routes.feature_flags.schemas",
        "documentation": {}
    },
    {
        "label": "get_health",
        "kind": 2,
        "importPath": "admin.app.api.routes.health.routes",
        "description": "admin.app.api.routes.health.routes",
        "peekOfCode": "def get_health() -> str:\n    return 'Ok'\n@router.get('/deps')\ndef get_deps() -> str:\n    return 'Ok'",
        "detail": "admin.app.api.routes.health.routes",
        "documentation": {}
    },
    {
        "label": "get_deps",
        "kind": 2,
        "importPath": "admin.app.api.routes.health.routes",
        "description": "admin.app.api.routes.health.routes",
        "peekOfCode": "def get_deps() -> str:\n    return 'Ok'",
        "detail": "admin.app.api.routes.health.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "admin.app.api.routes.health.routes",
        "description": "admin.app.api.routes.health.routes",
        "peekOfCode": "router = APIRouter(\n    prefix='/health',\n    tags=['Health'],\n    include_in_schema=False\n)\n@router.get('')\ndef get_health() -> str:\n    return 'Ok'\n@router.get('/deps')\ndef get_deps() -> str:",
        "detail": "admin.app.api.routes.health.routes",
        "documentation": {}
    },
    {
        "label": "generate_private_key",
        "kind": 2,
        "importPath": "admin.app.api.routes.projects.controllers.common",
        "description": "admin.app.api.routes.projects.controllers.common",
        "peekOfCode": "def generate_private_key() -> tuple[str, str]:\n    private_key = secrets.token_hex()\n    f = fernet.Fernet(Config.SECRET_KEY.encode())\n    encrypted_private_key = f.encrypt(private_key.encode()).decode()\n    return private_key, encrypted_private_key",
        "detail": "admin.app.api.routes.projects.controllers.common",
        "documentation": {}
    },
    {
        "label": "CreateProjectController",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.controllers.create_project",
        "description": "admin.app.api.routes.projects.controllers.create_project",
        "peekOfCode": "class CreateProjectController:\n    def __init__(self, request: CreateOrUpdateProject, me: User):\n        self.request = request\n        self.me = me\n    def handle_request(self) -> ProjectWithPrivateKey:\n        self._validate()\n        project_row, private_key = self._create_project()\n        return ProjectWithPrivateKey(\n            project_id=project_row.project_id,\n            name=project_row.name,",
        "detail": "admin.app.api.routes.projects.controllers.create_project",
        "documentation": {}
    },
    {
        "label": "CreateProjectPrivateKeyController",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.controllers.create_project_private_key",
        "description": "admin.app.api.routes.projects.controllers.create_project_private_key",
        "peekOfCode": "class CreateProjectPrivateKeyController:\n    def __init__(self, project_id: int, request: ProjectPrivateKeyName, me: User):\n        self.project_id = project_id\n        self.request = request\n        self.me = me\n    def handle_request(self) -> ProjectPrivateKey:\n        project_name = self._validate()\n        private_key = self._create_private_key(project_name=project_name)\n        return ProjectPrivateKey(\n            private_key=private_key",
        "detail": "admin.app.api.routes.projects.controllers.create_project_private_key",
        "documentation": {}
    },
    {
        "label": "DeleteProjectController",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.controllers.delete_project",
        "description": "admin.app.api.routes.projects.controllers.delete_project",
        "peekOfCode": "class DeleteProjectController:\n    def __init__(self, project_id: int, me: User):\n        self.project_id = project_id\n        self.me = me\n    def handle_request(self) -> SuccessResponse:\n        name = self._validate()\n        self._delete_project(name=name)\n        return SuccessResponse()\n    def _validate(self) -> str:\n        if (not self.me.role.has_permission(Permission.DELETE_PROJECT) or",
        "detail": "admin.app.api.routes.projects.controllers.delete_project",
        "documentation": {}
    },
    {
        "label": "DeleteProjectPrivateKeyController",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.controllers.delete_project_private_key",
        "description": "admin.app.api.routes.projects.controllers.delete_project_private_key",
        "peekOfCode": "class DeleteProjectPrivateKeyController:\n    def __init__(self, project_id: int, project_private_key_id: int, me: User):\n        self.project_id = project_id\n        self.project_private_key_id = project_private_key_id\n        self.me = me\n    def handle_request(self) -> SuccessResponse:\n        project_name, encrypted_private_key = self._validate()\n        self._delete_private_key(project_name=project_name, encrypted_private_key=encrypted_private_key)\n        return SuccessResponse()\n    def _validate(self) -> tuple[str, str]:",
        "detail": "admin.app.api.routes.projects.controllers.delete_project_private_key",
        "documentation": {}
    },
    {
        "label": "GetProjectController",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.controllers.get_project",
        "description": "admin.app.api.routes.projects.controllers.get_project",
        "peekOfCode": "class GetProjectController:\n    def __init__(self, project_id: int, me: User):\n        self.project_id = project_id\n        self.me = me\n    def handle_request(self) -> Project:\n        if self.project_id not in self.me.projects:\n            raise UnauthorizedException\n        with MySQLService.get_session() as session:\n            project_row = session.get(ProjectRow, self.project_id)\n        if not project_row:",
        "detail": "admin.app.api.routes.projects.controllers.get_project",
        "documentation": {}
    },
    {
        "label": "GetProjectPrivateKeysController",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.controllers.get_project_private_keys",
        "description": "admin.app.api.routes.projects.controllers.get_project_private_keys",
        "peekOfCode": "class GetProjectPrivateKeysController:\n    def __init__(self, project_id: int, page: int, page_size: int, me: User):\n        self.project_id = project_id\n        self.page = page\n        self.page_size = page_size\n        self.me = me\n    def handle_request(self) -> ProjectPrivateKeys:\n        if (not self.me.role.has_permission(Permission.READ_PROJECT_PRIVATE_KEYS) or\n                self.project_id not in self.me.projects):\n            raise UnauthorizedException",
        "detail": "admin.app.api.routes.projects.controllers.get_project_private_keys",
        "documentation": {}
    },
    {
        "label": "GetProjectsController",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.controllers.get_projects",
        "description": "admin.app.api.routes.projects.controllers.get_projects",
        "peekOfCode": "class GetProjectsController:\n    def __init__(self, page: int, page_size: int, me: User) -> None:\n        self.page = page\n        self.page_size = page_size\n        self.me = me\n    def handle_request(self) -> Projects:\n        with MySQLService.get_session() as session:\n            project_rows, total_count = ProjectsTable.get_projects(\n                project_ids=self.me.projects, page=self.page, page_size=self.page_size, session=session)\n        projects = [",
        "detail": "admin.app.api.routes.projects.controllers.get_projects",
        "documentation": {}
    },
    {
        "label": "UpdateProjectController",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.controllers.update_project",
        "description": "admin.app.api.routes.projects.controllers.update_project",
        "peekOfCode": "class UpdateProjectController:\n    def __init__(self, project_id: int, request: CreateOrUpdateProject, me: User):\n        self.project_id = project_id\n        self.request = request\n        self.me = me\n    def handle_request(self) -> Project:\n        self._validate()\n        project_row = self._update_project()\n        return Project.from_row(row=project_row)\n    def _validate(self) -> None:",
        "detail": "admin.app.api.routes.projects.controllers.update_project",
        "documentation": {}
    },
    {
        "label": "UpdateProjectPrivateKeyController",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.controllers.update_project_private_key",
        "description": "admin.app.api.routes.projects.controllers.update_project_private_key",
        "peekOfCode": "class UpdateProjectPrivateKeyController:\n    def __init__(self, project_id: int, project_private_key_id: int, request: ProjectPrivateKeyName, me: User):\n        self.project_id = project_id\n        self.project_private_key_id = project_private_key_id\n        self.request = request\n        self.me = me\n    def handle_request(self) -> SuccessResponse:\n        if (not self.me.role.has_permission(Permission.READ_PROJECT_PRIVATE_KEYS) or\n                self.project_id not in self.me.projects):\n            raise UnauthorizedException",
        "detail": "admin.app.api.routes.projects.controllers.update_project_private_key",
        "documentation": {}
    },
    {
        "label": "get_projects",
        "kind": 2,
        "importPath": "admin.app.api.routes.projects.routes",
        "description": "admin.app.api.routes.projects.routes",
        "peekOfCode": "def get_projects(\n    page: int = 0,\n    page_size: int = DEFAULT_PAGE_SIZE,\n    me: User = Depends(auth.get_user)\n) -> Projects:\n    return GetProjectsController(me=me, page=page, page_size=page_size).handle_request()\n@router.post('', response_model=ProjectWithPrivateKey)\ndef create_project(\n    request: CreateOrUpdateProject,\n    me: User = Depends(auth.get_user)",
        "detail": "admin.app.api.routes.projects.routes",
        "documentation": {}
    },
    {
        "label": "create_project",
        "kind": 2,
        "importPath": "admin.app.api.routes.projects.routes",
        "description": "admin.app.api.routes.projects.routes",
        "peekOfCode": "def create_project(\n    request: CreateOrUpdateProject,\n    me: User = Depends(auth.get_user)\n) -> ProjectWithPrivateKey:\n    return CreateProjectController(\n        request=request,\n        me=me\n    ).handle_request()\n@router.get('/{project_id}', response_model=Project)\ndef get_project(project_id: int, me: User = Depends(auth.get_user)) -> Project:",
        "detail": "admin.app.api.routes.projects.routes",
        "documentation": {}
    },
    {
        "label": "get_project",
        "kind": 2,
        "importPath": "admin.app.api.routes.projects.routes",
        "description": "admin.app.api.routes.projects.routes",
        "peekOfCode": "def get_project(project_id: int, me: User = Depends(auth.get_user)) -> Project:\n    return GetProjectController(\n        project_id=project_id,\n        me=me\n    ).handle_request()\n@router.put('/{project_id}', response_model=Project)\ndef update_project(\n    project_id: int,\n    request: CreateOrUpdateProject,\n    me: User = Depends(auth.get_user)",
        "detail": "admin.app.api.routes.projects.routes",
        "documentation": {}
    },
    {
        "label": "update_project",
        "kind": 2,
        "importPath": "admin.app.api.routes.projects.routes",
        "description": "admin.app.api.routes.projects.routes",
        "peekOfCode": "def update_project(\n    project_id: int,\n    request: CreateOrUpdateProject,\n    me: User = Depends(auth.get_user)\n) -> Project:\n    return UpdateProjectController(\n        project_id=project_id,\n        request=request,\n        me=me\n    ).handle_request()",
        "detail": "admin.app.api.routes.projects.routes",
        "documentation": {}
    },
    {
        "label": "delete_project",
        "kind": 2,
        "importPath": "admin.app.api.routes.projects.routes",
        "description": "admin.app.api.routes.projects.routes",
        "peekOfCode": "def delete_project(\n    project_id: int,\n    me: User = Depends(auth.get_user)\n) -> SuccessResponse:\n    return DeleteProjectController(\n        project_id=project_id,\n        me=me\n    ).handle_request()\n@router.post('/{project_id}/private_keys', response_model=ProjectPrivateKey)\ndef create_project_private_key(",
        "detail": "admin.app.api.routes.projects.routes",
        "documentation": {}
    },
    {
        "label": "create_project_private_key",
        "kind": 2,
        "importPath": "admin.app.api.routes.projects.routes",
        "description": "admin.app.api.routes.projects.routes",
        "peekOfCode": "def create_project_private_key(\n    project_id: int,\n    request: ProjectPrivateKeyName,\n    me: User = Depends(auth.get_user)\n) -> ProjectPrivateKey:\n    return CreateProjectPrivateKeyController(\n        project_id=project_id,\n        request=request,\n        me=me\n    ).handle_request()",
        "detail": "admin.app.api.routes.projects.routes",
        "documentation": {}
    },
    {
        "label": "get_project_private_keys",
        "kind": 2,
        "importPath": "admin.app.api.routes.projects.routes",
        "description": "admin.app.api.routes.projects.routes",
        "peekOfCode": "def get_project_private_keys(\n    project_id: int,\n    page: int = 0,\n    page_size: int = DEFAULT_PAGE_SIZE,\n    me: User = Depends(auth.get_user)\n) -> ProjectPrivateKeys:\n    return GetProjectPrivateKeysController(\n        project_id=project_id,\n        page=page,\n        page_size=page_size,",
        "detail": "admin.app.api.routes.projects.routes",
        "documentation": {}
    },
    {
        "label": "update_project_private_key",
        "kind": 2,
        "importPath": "admin.app.api.routes.projects.routes",
        "description": "admin.app.api.routes.projects.routes",
        "peekOfCode": "def update_project_private_key(\n    project_id: int,\n    project_private_key_id: int,\n    request: ProjectPrivateKeyName,\n    me: User = Depends(auth.get_user)\n) -> SuccessResponse:\n    return UpdateProjectPrivateKeyController(\n        project_id=project_id,\n        project_private_key_id=project_private_key_id,\n        request=request,",
        "detail": "admin.app.api.routes.projects.routes",
        "documentation": {}
    },
    {
        "label": "delete_project_private_key",
        "kind": 2,
        "importPath": "admin.app.api.routes.projects.routes",
        "description": "admin.app.api.routes.projects.routes",
        "peekOfCode": "def delete_project_private_key(\n    project_id: int,\n    project_private_key_id: int,\n    me: User = Depends(auth.get_user)\n) -> SuccessResponse:\n    return DeleteProjectPrivateKeyController(\n        project_id=project_id,\n        project_private_key_id=project_private_key_id,\n        me=me\n    ).handle_request()",
        "detail": "admin.app.api.routes.projects.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "admin.app.api.routes.projects.routes",
        "description": "admin.app.api.routes.projects.routes",
        "peekOfCode": "router = APIRouter(\n    prefix='/projects',\n    tags=['Projects']\n)\n@router.get('', response_model=Projects)\ndef get_projects(\n    page: int = 0,\n    page_size: int = DEFAULT_PAGE_SIZE,\n    me: User = Depends(auth.get_user)\n) -> Projects:",
        "detail": "admin.app.api.routes.projects.routes",
        "documentation": {}
    },
    {
        "label": "Project",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.schemas",
        "description": "admin.app.api.routes.projects.schemas",
        "peekOfCode": "class Project(BaseModel):\n    project_id: int\n    name: str\n    created_date: datetime\n    updated_date: datetime\n    @classmethod\n    def from_row(cls, row: ProjectRow) -> Self:\n        return cls(\n            project_id=row.project_id,\n            name=row.name,",
        "detail": "admin.app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectWithPrivateKey",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.schemas",
        "description": "admin.app.api.routes.projects.schemas",
        "peekOfCode": "class ProjectWithPrivateKey(Project):\n    private_key: str\nclass Projects(BaseModel):\n    items: list[Project]\n    total: int\nclass CreateOrUpdateProject(BaseModel):\n    name: str = Field(min_length=1, max_length=128)\n    model_config = ConfigDict(\n        str_strip_whitespace=True\n    )",
        "detail": "admin.app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "Projects",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.schemas",
        "description": "admin.app.api.routes.projects.schemas",
        "peekOfCode": "class Projects(BaseModel):\n    items: list[Project]\n    total: int\nclass CreateOrUpdateProject(BaseModel):\n    name: str = Field(min_length=1, max_length=128)\n    model_config = ConfigDict(\n        str_strip_whitespace=True\n    )\nclass ProjectPrivateKey(BaseModel):\n    private_key: str",
        "detail": "admin.app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "CreateOrUpdateProject",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.schemas",
        "description": "admin.app.api.routes.projects.schemas",
        "peekOfCode": "class CreateOrUpdateProject(BaseModel):\n    name: str = Field(min_length=1, max_length=128)\n    model_config = ConfigDict(\n        str_strip_whitespace=True\n    )\nclass ProjectPrivateKey(BaseModel):\n    private_key: str\nclass ProjectPrivateKeyName(BaseModel):\n    name: str = Field(min_length=1, max_length=128)\n    model_config = ConfigDict(",
        "detail": "admin.app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKey",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.schemas",
        "description": "admin.app.api.routes.projects.schemas",
        "peekOfCode": "class ProjectPrivateKey(BaseModel):\n    private_key: str\nclass ProjectPrivateKeyName(BaseModel):\n    name: str = Field(min_length=1, max_length=128)\n    model_config = ConfigDict(\n        str_strip_whitespace=True\n    )\nclass ProjectPrivateKeyNameAndId(BaseModel):\n    project_private_key_id: int\n    name: str",
        "detail": "admin.app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyName",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.schemas",
        "description": "admin.app.api.routes.projects.schemas",
        "peekOfCode": "class ProjectPrivateKeyName(BaseModel):\n    name: str = Field(min_length=1, max_length=128)\n    model_config = ConfigDict(\n        str_strip_whitespace=True\n    )\nclass ProjectPrivateKeyNameAndId(BaseModel):\n    project_private_key_id: int\n    name: str\n    created_date: datetime\nclass ProjectPrivateKeys(BaseModel):",
        "detail": "admin.app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyNameAndId",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.schemas",
        "description": "admin.app.api.routes.projects.schemas",
        "peekOfCode": "class ProjectPrivateKeyNameAndId(BaseModel):\n    project_private_key_id: int\n    name: str\n    created_date: datetime\nclass ProjectPrivateKeys(BaseModel):\n    items: list[ProjectPrivateKeyNameAndId]\n    total: int",
        "detail": "admin.app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeys",
        "kind": 6,
        "importPath": "admin.app.api.routes.projects.schemas",
        "description": "admin.app.api.routes.projects.schemas",
        "peekOfCode": "class ProjectPrivateKeys(BaseModel):\n    items: list[ProjectPrivateKeyNameAndId]\n    total: int",
        "detail": "admin.app.api.routes.projects.schemas",
        "documentation": {}
    },
    {
        "label": "generate_set_password_token",
        "kind": 2,
        "importPath": "admin.app.api.routes.users.controllers.common",
        "description": "admin.app.api.routes.users.controllers.common",
        "peekOfCode": "def generate_set_password_token() -> tuple[str, str]:\n    token = secrets.token_urlsafe().encode()\n    hashed_token = bcrypt.hashpw(\n        token,\n        bcrypt.gensalt(prefix=b'2a')\n    ).decode()\n    expire_time = time.time() + Config.SET_PASSWORD_TOKEN_TTL  # expire in 24 hours\n    set_password_token = '|'.join((\n        hashed_token,\n        str(expire_time)",
        "detail": "admin.app.api.routes.users.controllers.common",
        "documentation": {}
    },
    {
        "label": "DeleteUserController",
        "kind": 6,
        "importPath": "admin.app.api.routes.users.controllers.delete_user",
        "description": "admin.app.api.routes.users.controllers.delete_user",
        "peekOfCode": "class DeleteUserController:\n    def __init__(self, user_id: int, me: User):\n        self.user_id = user_id\n        self.me = me\n    def handle_request(self, response: Response) -> SuccessResponse:\n        with MySQLService.get_session() as session:\n            row = session.get(UserRow, self.user_id)\n            if not row:\n                raise NotFoundException\n            # Don't allow a user to delete another user with a higher role",
        "detail": "admin.app.api.routes.users.controllers.delete_user",
        "documentation": {}
    },
    {
        "label": "GetUserController",
        "kind": 6,
        "importPath": "admin.app.api.routes.users.controllers.get_user",
        "description": "admin.app.api.routes.users.controllers.get_user",
        "peekOfCode": "class GetUserController:\n    def __init__(self, user_id: int, me: User):\n        self.user_id = user_id\n        self.me = me\n    def handle_request(self) -> User:\n        if self.me.user_id != self.user_id and not self.me.role.has_permission(Permission.READ_USERS):\n            raise UnauthorizedException\n        with MySQLService.get_session() as session:\n            user_row = session.get(UserRow, self.user_id)\n            projects = UsersProjectsTable.get_user_projects(user_id=self.user_id, session=session)",
        "detail": "admin.app.api.routes.users.controllers.get_user",
        "documentation": {}
    },
    {
        "label": "GetUsersController",
        "kind": 6,
        "importPath": "admin.app.api.routes.users.controllers.get_users",
        "description": "admin.app.api.routes.users.controllers.get_users",
        "peekOfCode": "class GetUsersController:\n    def __init__(self, page: int, page_size: int, me: User) -> None:\n        self.page = page\n        self.page_size = page_size\n        self.me = me\n    def handle_request(self) -> Users:\n        if not self.me.role.has_permission(Permission.READ_USERS):\n            raise UnauthorizedException\n        with MySQLService.get_session() as session:\n            user_rows, total_count = UsersTable.get_users(page=self.page, page_size=self.page_size, session=session)",
        "detail": "admin.app.api.routes.users.controllers.get_users",
        "documentation": {}
    },
    {
        "label": "InviteUserController",
        "kind": 6,
        "importPath": "admin.app.api.routes.users.controllers.invite_user",
        "description": "admin.app.api.routes.users.controllers.invite_user",
        "peekOfCode": "class InviteUserController:\n    def __init__(self, request: InviteUser, me: User):\n        self.request = request\n        self.me = me\n    def handle_request(self) -> User:\n        self._validate()\n        hashed_set_password_token, token = common.generate_set_password_token()\n        user_row = self._create_user(set_password_token=hashed_set_password_token)\n        # TODO: Send invite/set password email (using token)\n        return User.from_row(row=user_row, projects=self.request.projects)",
        "detail": "admin.app.api.routes.users.controllers.invite_user",
        "documentation": {}
    },
    {
        "label": "ResetPasswordController",
        "kind": 6,
        "importPath": "admin.app.api.routes.users.controllers.reset_password",
        "description": "admin.app.api.routes.users.controllers.reset_password",
        "peekOfCode": "class ResetPasswordController:\n    def __init__(self, request: ResetPassword):\n        self.request = request\n    def handle_request(self) -> SuccessResponse:\n        hashed_set_password_token, token = common.generate_set_password_token()\n        with MySQLService.get_session() as session:\n            UsersTable.update_set_password_token(\n                email=self.request.email,\n                set_password_token=hashed_set_password_token,\n                session=session",
        "detail": "admin.app.api.routes.users.controllers.reset_password",
        "documentation": {}
    },
    {
        "label": "SetPasswordController",
        "kind": 6,
        "importPath": "admin.app.api.routes.users.controllers.set_password",
        "description": "admin.app.api.routes.users.controllers.set_password",
        "peekOfCode": "class SetPasswordController:\n    def __init__(self, email: str, password: str, password_repeat: str, token: str, authorize: AuthJWT):\n        self.email = email\n        self.password = password\n        self.password_repeat = password_repeat\n        self.token = token\n        self.authorize = authorize\n    def handle_request(self) -> RedirectResponse:\n        try:\n            user = self._get_user_by_email(email=self.email)",
        "detail": "admin.app.api.routes.users.controllers.set_password",
        "documentation": {}
    },
    {
        "label": "UpdateUserController",
        "kind": 6,
        "importPath": "admin.app.api.routes.users.controllers.update_user",
        "description": "admin.app.api.routes.users.controllers.update_user",
        "peekOfCode": "class UpdateUserController:\n    def __init__(self, user_id: int, request: UpdateUser, me: User):\n        self.user_id = user_id\n        self.request = request\n        self.me = me\n    def handle_request(self) -> User:\n        email = self._validate()\n        user_row = self._update_user(email=email)\n        return User.from_row(row=user_row, projects=self.request.projects)\n    def _validate(self) -> str:",
        "detail": "admin.app.api.routes.users.controllers.update_user",
        "documentation": {}
    },
    {
        "label": "get_users",
        "kind": 2,
        "importPath": "admin.app.api.routes.users.routes",
        "description": "admin.app.api.routes.users.routes",
        "peekOfCode": "def get_users(\n    page: int = 0,\n    page_size: int = DEFAULT_PAGE_SIZE,\n    me: User = Depends(auth.get_user)\n) -> Users:\n    return GetUsersController(\n        page=page,\n        page_size=page_size,\n        me=me\n    ).handle_request()",
        "detail": "admin.app.api.routes.users.routes",
        "documentation": {}
    },
    {
        "label": "invite_user",
        "kind": 2,
        "importPath": "admin.app.api.routes.users.routes",
        "description": "admin.app.api.routes.users.routes",
        "peekOfCode": "def invite_user(request: InviteUser, me: User = Depends(auth.get_user)) -> User:\n    return InviteUserController(\n        request=request,\n        me=me\n    ).handle_request()\n@router.get('/me', response_model=User)\ndef get_me(me: User = Depends(auth.get_user)) -> User:\n    return me\n@router.get('/{user_id}', response_model=User)\ndef get_user(user_id: int, me: User = Depends(auth.get_user)) -> User:",
        "detail": "admin.app.api.routes.users.routes",
        "documentation": {}
    },
    {
        "label": "get_me",
        "kind": 2,
        "importPath": "admin.app.api.routes.users.routes",
        "description": "admin.app.api.routes.users.routes",
        "peekOfCode": "def get_me(me: User = Depends(auth.get_user)) -> User:\n    return me\n@router.get('/{user_id}', response_model=User)\ndef get_user(user_id: int, me: User = Depends(auth.get_user)) -> User:\n    return GetUserController(\n        user_id=user_id,\n        me=me\n    ).handle_request()\n@router.put('/{user_id}', response_model=User)\ndef update_user(user_id: int, request: UpdateUser, me: User = Depends(auth.get_user)) -> User:",
        "detail": "admin.app.api.routes.users.routes",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "admin.app.api.routes.users.routes",
        "description": "admin.app.api.routes.users.routes",
        "peekOfCode": "def get_user(user_id: int, me: User = Depends(auth.get_user)) -> User:\n    return GetUserController(\n        user_id=user_id,\n        me=me\n    ).handle_request()\n@router.put('/{user_id}', response_model=User)\ndef update_user(user_id: int, request: UpdateUser, me: User = Depends(auth.get_user)) -> User:\n    return UpdateUserController(\n        user_id=user_id,\n        request=request,",
        "detail": "admin.app.api.routes.users.routes",
        "documentation": {}
    },
    {
        "label": "update_user",
        "kind": 2,
        "importPath": "admin.app.api.routes.users.routes",
        "description": "admin.app.api.routes.users.routes",
        "peekOfCode": "def update_user(user_id: int, request: UpdateUser, me: User = Depends(auth.get_user)) -> User:\n    return UpdateUserController(\n        user_id=user_id,\n        request=request,\n        me=me\n    ).handle_request()\n@router.delete('/{user_id}', response_model=SuccessResponse)\ndef delete_user(\n    user_id: int,\n    response: Response,",
        "detail": "admin.app.api.routes.users.routes",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "admin.app.api.routes.users.routes",
        "description": "admin.app.api.routes.users.routes",
        "peekOfCode": "def delete_user(\n    user_id: int,\n    response: Response,\n    me: User = Depends(auth.get_user)\n) -> SuccessResponse:\n    return DeleteUserController(\n        user_id=user_id,\n        me=me\n    ).handle_request(response=response)\n@router.post('/password/set', response_class=RedirectResponse)",
        "detail": "admin.app.api.routes.users.routes",
        "documentation": {}
    },
    {
        "label": "set_password",
        "kind": 2,
        "importPath": "admin.app.api.routes.users.routes",
        "description": "admin.app.api.routes.users.routes",
        "peekOfCode": "def set_password(\n    email: str = Form(),\n    password: str = Form(),\n    password_repeat: str = Form(),\n    token: str = Form(),\n    authorize: AuthJWT = Depends()\n) -> RedirectResponse:\n    return SetPasswordController(\n        email=email,\n        password=password,",
        "detail": "admin.app.api.routes.users.routes",
        "documentation": {}
    },
    {
        "label": "reset_password",
        "kind": 2,
        "importPath": "admin.app.api.routes.users.routes",
        "description": "admin.app.api.routes.users.routes",
        "peekOfCode": "def reset_password(request: ResetPassword) -> SuccessResponse:\n    return ResetPasswordController(\n        request=request\n    ).handle_request()",
        "detail": "admin.app.api.routes.users.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "admin.app.api.routes.users.routes",
        "description": "admin.app.api.routes.users.routes",
        "peekOfCode": "router = APIRouter(\n    prefix='/users',\n    tags=['Users']\n)\n@router.get('', response_model=Users)\ndef get_users(\n    page: int = 0,\n    page_size: int = DEFAULT_PAGE_SIZE,\n    me: User = Depends(auth.get_user)\n) -> Users:",
        "detail": "admin.app.api.routes.users.routes",
        "documentation": {}
    },
    {
        "label": "InviteUser",
        "kind": 6,
        "importPath": "admin.app.api.routes.users.schemas",
        "description": "admin.app.api.routes.users.schemas",
        "peekOfCode": "class InviteUser(BaseModel):\n    email: EmailStr\n    name: str = Field(min_length=1, max_length=128)\n    role: UserRole = Field(description=utils.get_enum_description(enum=UserRole))\n    projects: list[int]\n    model_config = ConfigDict(\n        str_strip_whitespace=True\n    )\nclass UpdateUser(BaseModel):\n    name: str = Field(min_length=1, max_length=128)",
        "detail": "admin.app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "UpdateUser",
        "kind": 6,
        "importPath": "admin.app.api.routes.users.schemas",
        "description": "admin.app.api.routes.users.schemas",
        "peekOfCode": "class UpdateUser(BaseModel):\n    name: str = Field(min_length=1, max_length=128)\n    role: UserRole = Field(description=utils.get_enum_description(enum=UserRole))\n    projects: list[int]\n    model_config = ConfigDict(\n        str_strip_whitespace=True\n    )\nclass SetPassword(BaseModel):\n    email: EmailStr\n    password: str",
        "detail": "admin.app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "SetPassword",
        "kind": 6,
        "importPath": "admin.app.api.routes.users.schemas",
        "description": "admin.app.api.routes.users.schemas",
        "peekOfCode": "class SetPassword(BaseModel):\n    email: EmailStr\n    password: str\n    password_repeat: str\n    token: str\nclass ResetPassword(BaseModel):\n    email: EmailStr\nclass Users(BaseModel):\n    items: list[User]\n    total: int",
        "detail": "admin.app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "ResetPassword",
        "kind": 6,
        "importPath": "admin.app.api.routes.users.schemas",
        "description": "admin.app.api.routes.users.schemas",
        "peekOfCode": "class ResetPassword(BaseModel):\n    email: EmailStr\nclass Users(BaseModel):\n    items: list[User]\n    total: int",
        "detail": "admin.app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 6,
        "importPath": "admin.app.api.routes.users.schemas",
        "description": "admin.app.api.routes.users.schemas",
        "peekOfCode": "class Users(BaseModel):\n    items: list[User]\n    total: int",
        "detail": "admin.app.api.routes.users.schemas",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "admin.app.api.auth",
        "description": "admin.app.api.auth",
        "peekOfCode": "def get_user(authorize: AuthJWT = Depends()) -> User:\n    if Config.ENABLE_FAKE_AUTH:\n        return User(\n            user_id=1,\n            email='owner@flag.ship',\n            name='Flagship Owner',\n            role=UserRole.OWNER,\n            projects=list(range(100)),\n            status=UserStatus.ACTIVATED,\n            created_date=datetime.datetime.now(),",
        "detail": "admin.app.api.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "admin.app.api.routers",
        "description": "admin.app.api.routers",
        "peekOfCode": "router = APIRouter()\nrouter.include_router(admin_router)\nrouter.include_router(auth_router)\nrouter.include_router(users_router)\nrouter.include_router(projects_router)\nrouter.include_router(feature_flags_router)\nrouter.include_router(context_fields_router)\nrouter.include_router(health_router)",
        "detail": "admin.app.api.routers",
        "documentation": {}
    },
    {
        "label": "ErrorModel",
        "kind": 6,
        "importPath": "admin.app.api.schemas",
        "description": "admin.app.api.schemas",
        "peekOfCode": "class ErrorModel(BaseModel):\n    code: str\n    message: str\n    field: str | None\nclass ErrorResponseModel(BaseModel):\n    errors: list[ErrorModel]\nclass SuccessResponse(BaseModel):\n    success: bool = True\nclass User(BaseModel):\n    user_id: int",
        "detail": "admin.app.api.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorResponseModel",
        "kind": 6,
        "importPath": "admin.app.api.schemas",
        "description": "admin.app.api.schemas",
        "peekOfCode": "class ErrorResponseModel(BaseModel):\n    errors: list[ErrorModel]\nclass SuccessResponse(BaseModel):\n    success: bool = True\nclass User(BaseModel):\n    user_id: int\n    email: EmailStr\n    name: str\n    role: UserRole = Field(description=utils.get_enum_description(enum=UserRole))\n    projects: list[int]",
        "detail": "admin.app.api.schemas",
        "documentation": {}
    },
    {
        "label": "SuccessResponse",
        "kind": 6,
        "importPath": "admin.app.api.schemas",
        "description": "admin.app.api.schemas",
        "peekOfCode": "class SuccessResponse(BaseModel):\n    success: bool = True\nclass User(BaseModel):\n    user_id: int\n    email: EmailStr\n    name: str\n    role: UserRole = Field(description=utils.get_enum_description(enum=UserRole))\n    projects: list[int]\n    status: UserStatus = Field(description=utils.get_enum_description(enum=UserStatus))\n    created_date: datetime",
        "detail": "admin.app.api.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "admin.app.api.schemas",
        "description": "admin.app.api.schemas",
        "peekOfCode": "class User(BaseModel):\n    user_id: int\n    email: EmailStr\n    name: str\n    role: UserRole = Field(description=utils.get_enum_description(enum=UserRole))\n    projects: list[int]\n    status: UserStatus = Field(description=utils.get_enum_description(enum=UserStatus))\n    created_date: datetime\n    updated_date: datetime\n    @classmethod",
        "detail": "admin.app.api.schemas",
        "documentation": {}
    },
    {
        "label": "get_enum_description",
        "kind": 2,
        "importPath": "admin.app.api.utils",
        "description": "admin.app.api.utils",
        "peekOfCode": "def get_enum_description(enum: Type[Enum]) -> str:\n    name_to_val = {\n        name: val.value\n        for name, val in enum.__members__.items()\n    }\n    description = []\n    for name, val in name_to_val.items():\n        clean_name = name.lower().replace('_', ' ')\n        description.append(f'{clean_name}: {val}')\n    return '</br>'.join(description)",
        "detail": "admin.app.api.utils",
        "documentation": {}
    },
    {
        "label": "BaseRow",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.base",
        "description": "admin.app.services.database.mysql.schemas.base",
        "peekOfCode": "class BaseRow(AsyncAttrs, DeclarativeBase):\n    pass",
        "detail": "admin.app.services.database.mysql.schemas.base",
        "documentation": {}
    },
    {
        "label": "ContextFieldRow",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.context_field",
        "description": "admin.app.services.database.mysql.schemas.context_field",
        "peekOfCode": "class ContextFieldRow(BaseRow):\n    __tablename__ = 'context_fields'\n    context_field_id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    project_id: Mapped[int] = mapped_column(Integer, ForeignKey('projects.project_id'))\n    name: Mapped[str] = mapped_column(String(128))\n    description: Mapped[str] = mapped_column(String(256))\n    field_key: Mapped[str] = mapped_column(String(64))\n    value_type: Mapped[int] = mapped_column(Integer, default=False)\n    enum_def: Mapped[str | None] = mapped_column(Text, nullable=True)\n    created_date: Mapped[datetime.datetime] = mapped_column(UtcDateTime, server_default=func.current_timestamp())",
        "detail": "admin.app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldsTable",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.context_field",
        "description": "admin.app.services.database.mysql.schemas.context_field",
        "peekOfCode": "class ContextFieldsTable:\n    @staticmethod\n    def get_context_fields(\n        project_id: int,\n        session: Session,\n        page: int | None = None,\n        page_size: int | None = None\n    ) -> tuple[list[ContextFieldRow], int]:\n        stmt = \\\n            select(",
        "detail": "admin.app.services.database.mysql.schemas.context_field",
        "documentation": {}
    },
    {
        "label": "ContextFieldAuditLogRow",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.context_field_audit_logs",
        "description": "admin.app.services.database.mysql.schemas.context_field_audit_logs",
        "peekOfCode": "class ContextFieldAuditLogRow(BaseRow):\n    __tablename__ = 'context_field_audit_logs'\n    audit_log_id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    context_field_id: Mapped[int] = mapped_column(Integer, ForeignKey('context_fields.context_field_id'))\n    project_id: Mapped[int] = mapped_column(Integer, ForeignKey('projects.project_id'))\n    actor: Mapped[str] = mapped_column(String(320))\n    name: Mapped[str] = mapped_column(String(128))\n    description: Mapped[str] = mapped_column(String(256))\n    enum_def: Mapped[str | None] = mapped_column(Text, nullable=True)\n    created_date: Mapped[datetime.datetime] = mapped_column(UtcDateTime, server_default=func.current_timestamp())",
        "detail": "admin.app.services.database.mysql.schemas.context_field_audit_logs",
        "documentation": {}
    },
    {
        "label": "ContextFieldAuditLogsTable",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.context_field_audit_logs",
        "description": "admin.app.services.database.mysql.schemas.context_field_audit_logs",
        "peekOfCode": "class ContextFieldAuditLogsTable:\n    @staticmethod\n    def get_context_field_audit_logs(\n        project_id: int,\n        context_field_id: int,\n        page: int,\n        page_size: int,\n        session: Session\n    ) -> tuple[list[ContextFieldAuditLogRow], int]:\n        rows = list(session.scalars(",
        "detail": "admin.app.services.database.mysql.schemas.context_field_audit_logs",
        "documentation": {}
    },
    {
        "label": "FeatureFlagRow",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.feature_flag",
        "description": "admin.app.services.database.mysql.schemas.feature_flag",
        "peekOfCode": "class FeatureFlagRow(BaseRow):\n    __tablename__ = 'feature_flags'\n    feature_flag_id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    project_id: Mapped[int] = mapped_column(Integer, ForeignKey('projects.project_id'))\n    name: Mapped[str] = mapped_column(String(128))\n    description: Mapped[str] = mapped_column(String(256))\n    conditions: Mapped[str] = mapped_column(Text)\n    enabled: Mapped[bool] = mapped_column(Boolean, default=False)\n    created_date: Mapped[datetime.datetime] = mapped_column(UtcDateTime, server_default=func.current_timestamp())\n    updated_date: Mapped[datetime.datetime] = mapped_column(",
        "detail": "admin.app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagsTable",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.feature_flag",
        "description": "admin.app.services.database.mysql.schemas.feature_flag",
        "peekOfCode": "class FeatureFlagsTable:\n    @staticmethod\n    def get_feature_flags(\n        project_id: int,\n        session: Session,\n        page: int | None = None,\n        page_size: int | None = None\n    ) -> tuple[list[FeatureFlagRow], int]:\n        stmt = \\\n            select(",
        "detail": "admin.app.services.database.mysql.schemas.feature_flag",
        "documentation": {}
    },
    {
        "label": "FeatureFlagAuditLogRow",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.feature_flag_audit_logs",
        "description": "admin.app.services.database.mysql.schemas.feature_flag_audit_logs",
        "peekOfCode": "class FeatureFlagAuditLogRow(BaseRow):\n    __tablename__ = 'feature_flag_audit_logs'\n    audit_log_id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    feature_flag_id: Mapped[int] = mapped_column(Integer, ForeignKey('feature_flags.feature_flag_id'))\n    project_id: Mapped[int] = mapped_column(Integer, ForeignKey('projects.project_id'))\n    actor: Mapped[str] = mapped_column(String(320))\n    name: Mapped[str] = mapped_column(String(128))\n    description: Mapped[str] = mapped_column(String(256))\n    conditions: Mapped[str] = mapped_column(Text)\n    enabled: Mapped[bool] = mapped_column(Boolean, default=False)",
        "detail": "admin.app.services.database.mysql.schemas.feature_flag_audit_logs",
        "documentation": {}
    },
    {
        "label": "FeatureFlagAuditLogsTable",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.feature_flag_audit_logs",
        "description": "admin.app.services.database.mysql.schemas.feature_flag_audit_logs",
        "peekOfCode": "class FeatureFlagAuditLogsTable:\n    @staticmethod\n    def get_feature_flag_audit_logs(\n        project_id: int,\n        feature_flag_id: int,\n        page: int,\n        page_size: int,\n        session: Session\n    ) -> tuple[list[FeatureFlagAuditLogRow], int]:\n        rows = list(session.scalars(",
        "detail": "admin.app.services.database.mysql.schemas.feature_flag_audit_logs",
        "documentation": {}
    },
    {
        "label": "ProjectRow",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.project",
        "description": "admin.app.services.database.mysql.schemas.project",
        "peekOfCode": "class ProjectRow(BaseRow):\n    __tablename__ = 'projects'\n    project_id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    name: Mapped[str] = mapped_column(String(128), unique=True)\n    created_date: Mapped[datetime.datetime] = mapped_column(UtcDateTime, server_default=func.current_timestamp())\n    updated_date: Mapped[datetime.datetime] = mapped_column(\n        UtcDateTime, server_default=text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))\nclass ProjectsTable:\n    @staticmethod\n    def get_project_by_name(name: str, session: Session) -> ProjectRow | None:",
        "detail": "admin.app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectsTable",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.project",
        "description": "admin.app.services.database.mysql.schemas.project",
        "peekOfCode": "class ProjectsTable:\n    @staticmethod\n    def get_project_by_name(name: str, session: Session) -> ProjectRow | None:\n        return session.scalar(\n            select(\n                ProjectRow\n            ).where(\n                ProjectRow.name == name\n            )\n        )",
        "detail": "admin.app.services.database.mysql.schemas.project",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeyRow",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.project_private_key",
        "description": "admin.app.services.database.mysql.schemas.project_private_key",
        "peekOfCode": "class ProjectPrivateKeyRow(BaseRow):\n    __tablename__ = 'project_private_keys'\n    project_private_key_id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    project_id: Mapped[int] = mapped_column(Integer, ForeignKey('projects.project_id'))\n    private_key: Mapped[str] = mapped_column(String(184))\n    name: Mapped[str] = mapped_column(String(128))\n    created_date: Mapped[datetime.datetime] = mapped_column(UtcDateTime, server_default=func.current_timestamp())\nclass ProjectPrivateKeysTable:\n    @staticmethod\n    def get_project_private_keys(",
        "detail": "admin.app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "ProjectPrivateKeysTable",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.project_private_key",
        "description": "admin.app.services.database.mysql.schemas.project_private_key",
        "peekOfCode": "class ProjectPrivateKeysTable:\n    @staticmethod\n    def get_project_private_keys(\n        project_id: int,\n        page: int,\n        page_size: int,\n        session: Session\n    ) -> tuple[list[ProjectPrivateKeyRow], int]:\n        rows = list(session.scalars(\n            select(",
        "detail": "admin.app.services.database.mysql.schemas.project_private_key",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogRow",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.system_audit_logs",
        "description": "admin.app.services.database.mysql.schemas.system_audit_logs",
        "peekOfCode": "class SystemAuditLogRow(BaseRow):\n    __tablename__ = 'system_audit_logs'\n    audit_log_id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    actor: Mapped[str] = mapped_column(String(320))\n    event_type: Mapped[int] = mapped_column(Integer)\n    details: Mapped[str | None] = mapped_column(String(300), nullable=True)\n    created_date: Mapped[datetime.datetime] = mapped_column(UtcDateTime, server_default=func.current_timestamp())\nclass SystemAuditLogsTable:\n    @staticmethod\n    def get_system_audit_logs(",
        "detail": "admin.app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "SystemAuditLogsTable",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.system_audit_logs",
        "description": "admin.app.services.database.mysql.schemas.system_audit_logs",
        "peekOfCode": "class SystemAuditLogsTable:\n    @staticmethod\n    def get_system_audit_logs(\n        page: int,\n        page_size: int,\n        session: Session\n    ) -> tuple[list[SystemAuditLogRow], int]:\n        rows = list(session.scalars(\n            select(\n                SystemAuditLogRow",
        "detail": "admin.app.services.database.mysql.schemas.system_audit_logs",
        "documentation": {}
    },
    {
        "label": "UserRow",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.user",
        "description": "admin.app.services.database.mysql.schemas.user",
        "peekOfCode": "class UserRow(BaseRow):\n    __tablename__ = 'users'\n    user_id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    email: Mapped[str] = mapped_column(String(320), unique=True)\n    name: Mapped[str] = mapped_column(String(128))\n    role: Mapped[int] = mapped_column(Integer)\n    status: Mapped[int] = mapped_column(Integer)\n    password: Mapped[str] = mapped_column(String, nullable=True)\n    set_password_token: Mapped[str | None] = mapped_column(Text, nullable=True)\n    created_date: Mapped[datetime.datetime] = mapped_column(UtcDateTime, server_default=func.current_timestamp())",
        "detail": "admin.app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UsersTable",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.user",
        "description": "admin.app.services.database.mysql.schemas.user",
        "peekOfCode": "class UsersTable:\n    @staticmethod\n    def get_users(page: int, page_size: int, session: Session) -> tuple[list[UserRow], int]:\n        rows = list(session.scalars(\n            select(\n                UserRow\n            ).order_by(\n                UserRow.user_id\n            ).offset(\n                page * page_size",
        "detail": "admin.app.services.database.mysql.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserProjectRow",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.user_project",
        "description": "admin.app.services.database.mysql.schemas.user_project",
        "peekOfCode": "class UserProjectRow(BaseRow):\n    __tablename__ = 'users_projects'\n    user_id: Mapped[int] = mapped_column(Integer, ForeignKey('users.user_id'), primary_key=True)\n    project_id: Mapped[int] = mapped_column(Integer, ForeignKey('projects.project_id'))\nclass UsersProjectsTable:\n    @staticmethod\n    def get_all_user_projects(session: Session) -> list[UserProjectRow]:\n        return list(\n            session.scalars(\n                select(",
        "detail": "admin.app.services.database.mysql.schemas.user_project",
        "documentation": {}
    },
    {
        "label": "UsersProjectsTable",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.schemas.user_project",
        "description": "admin.app.services.database.mysql.schemas.user_project",
        "peekOfCode": "class UsersProjectsTable:\n    @staticmethod\n    def get_all_user_projects(session: Session) -> list[UserProjectRow]:\n        return list(\n            session.scalars(\n                select(\n                    UserProjectRow\n                )\n            )\n        )",
        "detail": "admin.app.services.database.mysql.schemas.user_project",
        "documentation": {}
    },
    {
        "label": "MySQLService",
        "kind": 6,
        "importPath": "admin.app.services.database.mysql.service",
        "description": "admin.app.services.database.mysql.service",
        "peekOfCode": "class MySQLService:\n    _engine: Engine\n    @classmethod\n    def init(cls) -> None:\n        cls._engine = create_engine(\n            url=Config.MYSQL_CONN_STR,\n            echo=Config.MYSQL_ECHO,\n            echo_pool=Config.MYSQL_ECHO,\n            isolation_level=Config.MYSQL_ISOLATION_LEVEL,\n            pool_size=Config.MYSQL_POOL_SIZE,",
        "detail": "admin.app.services.database.mysql.service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "kind": 6,
        "importPath": "admin.app.services.database.redis.service",
        "description": "admin.app.services.database.redis.service",
        "peekOfCode": "class RedisService:\n    if TYPE_CHECKING:\n        _client: RedisCluster[str]\n    else:\n        _client: RedisCluster\n    @classmethod\n    def init(cls) -> None:\n        cls._client = RedisCluster.from_url(\n            url=Config.REDIS_CONN_STR,\n            decode_responses=True,",
        "detail": "admin.app.services.database.redis.service",
        "documentation": {}
    },
    {
        "label": "StringsService",
        "kind": 6,
        "importPath": "admin.app.services.strings.service",
        "description": "admin.app.services.strings.service",
        "peekOfCode": "class StringsService:\n    DEFAULT_LOCALE: str\n    LOOKUP: Final[dict[str, dict[str, str]]] = {}\n    @classmethod\n    def init(cls, default_locale: str) -> None:\n        file_path = os.path.join(os.path.dirname(__file__), '../../../config/strings.json')\n        with open(file_path) as file:\n            cls.LOOKUP.update(ujson.loads(file.read()))\n        cls.DEFAULT_LOCALE = default_locale\n    @classmethod",
        "detail": "admin.app.services.strings.service",
        "documentation": {}
    },
    {
        "label": "Bootstrap",
        "kind": 6,
        "importPath": "admin.app.bootstrap",
        "description": "admin.app.bootstrap",
        "peekOfCode": "class Bootstrap:\n    def run(self) -> FastAPI:\n        Config.init()\n        self._init_logger()\n        app = self._build_app()\n        self._init_jwt()\n        self._init_services()\n        app.include_router(router)\n        self._override_openapi(app=app)\n        self._add_cors_middleware(app=app)",
        "detail": "admin.app.bootstrap",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "admin.app.config",
        "description": "admin.app.config",
        "peekOfCode": "class Config:\n    SECRET_KEY: str\n    MYSQL_ECHO: bool\n    MYSQL_ISOLATION_LEVEL: str\n    MYSQL_POOL_SIZE: int\n    MYSQL_MAX_OVERFLOW: int\n    MYSQL_CONN_STR: str\n    REDIS_CONN_STR: str\n    UI_BASE_URL: str\n    SESSION_COOKIE_KEY: str",
        "detail": "admin.app.config",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "admin.app.config",
        "description": "admin.app.config",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Config:\n    SECRET_KEY: str\n    MYSQL_ECHO: bool\n    MYSQL_ISOLATION_LEVEL: str\n    MYSQL_POOL_SIZE: int\n    MYSQL_MAX_OVERFLOW: int\n    MYSQL_CONN_STR: str\n    REDIS_CONN_STR: str\n    UI_BASE_URL: str",
        "detail": "admin.app.config",
        "documentation": {}
    },
    {
        "label": "ContextValueType",
        "kind": 6,
        "importPath": "admin.app.constants",
        "description": "admin.app.constants",
        "peekOfCode": "class ContextValueType(IntEnum):\n    STRING = 1\n    NUMBER = 2\n    INTEGER = 3\n    BOOLEAN = 4\n    ENUM = 5\n    VERSION = 6\n    STRING_LIST = 7\n    INTEGER_LIST = 8\n    ENUM_LIST = 9",
        "detail": "admin.app.constants",
        "documentation": {}
    },
    {
        "label": "Operator",
        "kind": 6,
        "importPath": "admin.app.constants",
        "description": "admin.app.constants",
        "peekOfCode": "class Operator(IntEnum):\n    EQUALS = 1\n    NOT_EQUALS = 2\n    LESS_THAN = 3\n    LESS_THAN_OR_EQUAL_TO = 4\n    GREATER_THAN = 5\n    GREATER_THAN_OR_EQUAL_TO = 6\n    MATCHES_REGEX = 7\n    IN_LIST = 8\n    NOT_IN_LIST = 9",
        "detail": "admin.app.constants",
        "documentation": {}
    },
    {
        "label": "Permission",
        "kind": 6,
        "importPath": "admin.app.constants",
        "description": "admin.app.constants",
        "peekOfCode": "class Permission(IntEnum):\n    # Projects\n    CREATE_PROJECT = auto()\n    UPDATE_PROJECT = auto()\n    DELETE_PROJECT = auto()\n    READ_PROJECT_PRIVATE_KEYS = auto()\n    EDIT_PROJECT_PRIVATE_KEYS = auto()\n    CREATE_PROJECT_PRIVATE_KEY = auto()\n    DELETE_PROJECT_PRIVATE_KEY = auto()\n    # Feature flags",
        "detail": "admin.app.constants",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "admin.app.constants",
        "description": "admin.app.constants",
        "peekOfCode": "class UserRole(IntEnum):\n    READ_ONLY = 5\n    STANDARD = 10\n    ADMIN = 15\n    OWNER = 20\n    def has_permission(self, permission: Permission) -> bool:\n        if self is self.STANDARD:\n            return permission in (\n                Permission.CREATE_FEATURE_FLAG,\n                Permission.UPDATE_FEATURE_FLAG,",
        "detail": "admin.app.constants",
        "documentation": {}
    },
    {
        "label": "UserStatus",
        "kind": 6,
        "importPath": "admin.app.constants",
        "description": "admin.app.constants",
        "peekOfCode": "class UserStatus(IntEnum):\n    INVITED = 1\n    ACTIVATED = 2\nCONTEXT_VALUE_TYPE_OPERATORS: Final[dict[ContextValueType, set[Operator]]] = {\n    ContextValueType.STRING: {\n        Operator.EQUALS,\n        Operator.NOT_EQUALS,\n        Operator.MATCHES_REGEX,\n        Operator.IN_LIST,\n        Operator.NOT_IN_LIST",
        "detail": "admin.app.constants",
        "documentation": {}
    },
    {
        "label": "AuditLogEventType",
        "kind": 6,
        "importPath": "admin.app.constants",
        "description": "admin.app.constants",
        "peekOfCode": "class AuditLogEventType(IntEnum):\n    INVITED_USER = 1\n    DELETED_USER = 2\n    UPDATED_USER = 3\n    SET_PASSWORD = 4\n    RESET_PASSWORD = 5\n    ADDED_PROJECT_PRIVATE_KEY = 6\n    CREATED_PROJECT = 7\n    DELETED_PROJECT = 8\n    CREATED_CONTEXT_FIELD = 9",
        "detail": "admin.app.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PAGE_SIZE",
        "kind": 5,
        "importPath": "admin.app.constants",
        "description": "admin.app.constants",
        "peekOfCode": "DEFAULT_PAGE_SIZE = sys.maxsize\nclass ContextValueType(IntEnum):\n    STRING = 1\n    NUMBER = 2\n    INTEGER = 3\n    BOOLEAN = 4\n    ENUM = 5\n    VERSION = 6\n    STRING_LIST = 7\n    INTEGER_LIST = 8",
        "detail": "admin.app.constants",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "admin.app.main",
        "description": "admin.app.main",
        "peekOfCode": "app = Bootstrap().run()",
        "detail": "admin.app.main",
        "documentation": {}
    },
    {
        "label": "TestGetAuditLogs",
        "kind": 6,
        "importPath": "admin.tests.api.routes.admin.test_get_audit_logs",
        "description": "admin.tests.api.routes.admin.test_get_audit_logs",
        "peekOfCode": "class TestGetAuditLogs(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_get_audit_logs.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json',",
        "detail": "admin.tests.api.routes.admin.test_get_audit_logs",
        "documentation": {}
    },
    {
        "label": "TestLogin",
        "kind": 6,
        "importPath": "admin.tests.api.routes.auth.test_login",
        "description": "admin.tests.api.routes.auth.test_login",
        "peekOfCode": "class TestLogin(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_login.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/x-www-form-urlencoded',",
        "detail": "admin.tests.api.routes.auth.test_login",
        "documentation": {}
    },
    {
        "label": "TestLogout",
        "kind": 6,
        "importPath": "admin.tests.api.routes.auth.test_logout",
        "description": "admin.tests.api.routes.auth.test_logout",
        "peekOfCode": "class TestLogout(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_logout.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.auth.test_logout",
        "documentation": {}
    },
    {
        "label": "TestCreateContextField",
        "kind": 6,
        "importPath": "admin.tests.api.routes.context_fields.test_create_context_field",
        "description": "admin.tests.api.routes.context_fields.test_create_context_field",
        "peekOfCode": "class TestCreateContextField(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_create_context_field.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.context_fields.test_create_context_field",
        "documentation": {}
    },
    {
        "label": "TestDeleteContextField",
        "kind": 6,
        "importPath": "admin.tests.api.routes.context_fields.test_delete_context_field",
        "description": "admin.tests.api.routes.context_fields.test_delete_context_field",
        "peekOfCode": "class TestDeleteContextField(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_delete_context_field.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.context_fields.test_delete_context_field",
        "documentation": {}
    },
    {
        "label": "TestGetAuditLogs",
        "kind": 6,
        "importPath": "admin.tests.api.routes.context_fields.test_get_audit_logs",
        "description": "admin.tests.api.routes.context_fields.test_get_audit_logs",
        "peekOfCode": "class TestGetAuditLogs(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_get_audit_logs.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.context_fields.test_get_audit_logs",
        "documentation": {}
    },
    {
        "label": "TestGetContextField",
        "kind": 6,
        "importPath": "admin.tests.api.routes.context_fields.test_get_context_field",
        "description": "admin.tests.api.routes.context_fields.test_get_context_field",
        "peekOfCode": "class TestGetContextField(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_get_context_field.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.context_fields.test_get_context_field",
        "documentation": {}
    },
    {
        "label": "TestGetContextFields",
        "kind": 6,
        "importPath": "admin.tests.api.routes.context_fields.test_get_context_fields",
        "description": "admin.tests.api.routes.context_fields.test_get_context_fields",
        "peekOfCode": "class TestGetContextFields(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_get_context_fields.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.context_fields.test_get_context_fields",
        "documentation": {}
    },
    {
        "label": "TestUpdateContextField",
        "kind": 6,
        "importPath": "admin.tests.api.routes.context_fields.test_update_context_field",
        "description": "admin.tests.api.routes.context_fields.test_update_context_field",
        "peekOfCode": "class TestUpdateContextField(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_update_context_field.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.context_fields.test_update_context_field",
        "documentation": {}
    },
    {
        "label": "TestCreateFeatureFlag",
        "kind": 6,
        "importPath": "admin.tests.api.routes.feature_flags.test_create_feature_flag",
        "description": "admin.tests.api.routes.feature_flags.test_create_feature_flag",
        "peekOfCode": "class TestCreateFeatureFlag(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_create_feature_flag.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.feature_flags.test_create_feature_flag",
        "documentation": {}
    },
    {
        "label": "TestDeleteFeatureFlag",
        "kind": 6,
        "importPath": "admin.tests.api.routes.feature_flags.test_delete_feature_flag",
        "description": "admin.tests.api.routes.feature_flags.test_delete_feature_flag",
        "peekOfCode": "class TestDeleteFeatureFlag(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_delete_feature_flag.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.feature_flags.test_delete_feature_flag",
        "documentation": {}
    },
    {
        "label": "TestGetAuditLogs",
        "kind": 6,
        "importPath": "admin.tests.api.routes.feature_flags.test_get_audit_logs",
        "description": "admin.tests.api.routes.feature_flags.test_get_audit_logs",
        "peekOfCode": "class TestGetAuditLogs(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_get_audit_logs.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json',",
        "detail": "admin.tests.api.routes.feature_flags.test_get_audit_logs",
        "documentation": {}
    },
    {
        "label": "TestGetFeatureFlag",
        "kind": 6,
        "importPath": "admin.tests.api.routes.feature_flags.test_get_feature_flag",
        "description": "admin.tests.api.routes.feature_flags.test_get_feature_flag",
        "peekOfCode": "class TestGetFeatureFlag(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_get_feature_flag.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.feature_flags.test_get_feature_flag",
        "documentation": {}
    },
    {
        "label": "TestGetFeatureFlags",
        "kind": 6,
        "importPath": "admin.tests.api.routes.feature_flags.test_get_feature_flags",
        "description": "admin.tests.api.routes.feature_flags.test_get_feature_flags",
        "peekOfCode": "class TestGetFeatureFlags(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_get_feature_flags.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.feature_flags.test_get_feature_flags",
        "documentation": {}
    },
    {
        "label": "TestUpdateFeatureFlag",
        "kind": 6,
        "importPath": "admin.tests.api.routes.feature_flags.test_update_feature_flag",
        "description": "admin.tests.api.routes.feature_flags.test_update_feature_flag",
        "peekOfCode": "class TestUpdateFeatureFlag(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_update_feature_flag.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.feature_flags.test_update_feature_flag",
        "documentation": {}
    },
    {
        "label": "TestUpdateFeatureFlagStatus",
        "kind": 6,
        "importPath": "admin.tests.api.routes.feature_flags.test_update_feature_flag_status",
        "description": "admin.tests.api.routes.feature_flags.test_update_feature_flag_status",
        "peekOfCode": "class TestUpdateFeatureFlagStatus(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_update_feature_flag_status.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.feature_flags.test_update_feature_flag_status",
        "documentation": {}
    },
    {
        "label": "TestGetHealth",
        "kind": 6,
        "importPath": "admin.tests.api.routes.health.test_get_health",
        "description": "admin.tests.api.routes.health.test_get_health",
        "peekOfCode": "class TestGetHealth(BaseTestCase):\n    def test_get_health__200(self) -> None:\n        response = client.get('/health')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.text, '\"Ok\"')",
        "detail": "admin.tests.api.routes.health.test_get_health",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "admin.tests.api.routes.health.test_get_health",
        "description": "admin.tests.api.routes.health.test_get_health",
        "peekOfCode": "client = TestClient(app)\nclass TestGetHealth(BaseTestCase):\n    def test_get_health__200(self) -> None:\n        response = client.get('/health')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.text, '\"Ok\"')",
        "detail": "admin.tests.api.routes.health.test_get_health",
        "documentation": {}
    },
    {
        "label": "TestCreateProject",
        "kind": 6,
        "importPath": "admin.tests.api.routes.projects.test_create_project",
        "description": "admin.tests.api.routes.projects.test_create_project",
        "peekOfCode": "class TestCreateProject(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        self.owner_user = utils.User()\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_create_project.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,",
        "detail": "admin.tests.api.routes.projects.test_create_project",
        "documentation": {}
    },
    {
        "label": "TestResetProjectPrivateKey",
        "kind": 6,
        "importPath": "admin.tests.api.routes.projects.test_create_project_private_key",
        "description": "admin.tests.api.routes.projects.test_create_project_private_key",
        "peekOfCode": "class TestResetProjectPrivateKey(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_create_project_private_key.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.projects.test_create_project_private_key",
        "documentation": {}
    },
    {
        "label": "TestDeleteProject",
        "kind": 6,
        "importPath": "admin.tests.api.routes.projects.test_delete_project",
        "description": "admin.tests.api.routes.projects.test_delete_project",
        "peekOfCode": "class TestDeleteProject(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_delete_project.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.projects.test_delete_project",
        "documentation": {}
    },
    {
        "label": "TestDeleteProjectPrivateKey",
        "kind": 6,
        "importPath": "admin.tests.api.routes.projects.test_delete_project_private_key",
        "description": "admin.tests.api.routes.projects.test_delete_project_private_key",
        "peekOfCode": "class TestDeleteProjectPrivateKey(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_delete_project_private_key.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.projects.test_delete_project_private_key",
        "documentation": {}
    },
    {
        "label": "TestGetProject",
        "kind": 6,
        "importPath": "admin.tests.api.routes.projects.test_get_project",
        "description": "admin.tests.api.routes.projects.test_get_project",
        "peekOfCode": "class TestGetProject(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_get_project.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.projects.test_get_project",
        "documentation": {}
    },
    {
        "label": "TestGetProjectPrivateKey",
        "kind": 6,
        "importPath": "admin.tests.api.routes.projects.test_get_project_private_keys",
        "description": "admin.tests.api.routes.projects.test_get_project_private_keys",
        "peekOfCode": "class TestGetProjectPrivateKey(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_get_project_private_keys.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.projects.test_get_project_private_keys",
        "documentation": {}
    },
    {
        "label": "TestGetProjects",
        "kind": 6,
        "importPath": "admin.tests.api.routes.projects.test_get_projects",
        "description": "admin.tests.api.routes.projects.test_get_projects",
        "peekOfCode": "class TestGetProjects(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_get_projects.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.projects.test_get_projects",
        "documentation": {}
    },
    {
        "label": "TestUpdateProject",
        "kind": 6,
        "importPath": "admin.tests.api.routes.projects.test_update_project",
        "description": "admin.tests.api.routes.projects.test_update_project",
        "peekOfCode": "class TestUpdateProject(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_update_project.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.projects.test_update_project",
        "documentation": {}
    },
    {
        "label": "TestUpdateProjectPrivateKey",
        "kind": 6,
        "importPath": "admin.tests.api.routes.projects.test_update_project_private_key",
        "description": "admin.tests.api.routes.projects.test_update_project_private_key",
        "peekOfCode": "class TestUpdateProjectPrivateKey(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_update_project_private_key.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.projects.test_update_project_private_key",
        "documentation": {}
    },
    {
        "label": "TestDeleteUser",
        "kind": 6,
        "importPath": "admin.tests.api.routes.users.test_delete_user",
        "description": "admin.tests.api.routes.users.test_delete_user",
        "peekOfCode": "class TestDeleteUser(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_delete_user.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.users.test_delete_user",
        "documentation": {}
    },
    {
        "label": "TestGetUser",
        "kind": 6,
        "importPath": "admin.tests.api.routes.users.test_get_user",
        "description": "admin.tests.api.routes.users.test_get_user",
        "peekOfCode": "class TestGetUser(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_get_user.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.users.test_get_user",
        "documentation": {}
    },
    {
        "label": "TestGetUsers",
        "kind": 6,
        "importPath": "admin.tests.api.routes.users.test_get_users",
        "description": "admin.tests.api.routes.users.test_get_users",
        "peekOfCode": "class TestGetUsers(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_get_users.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.users.test_get_users",
        "documentation": {}
    },
    {
        "label": "TestInviteUser",
        "kind": 6,
        "importPath": "admin.tests.api.routes.users.test_invite_user",
        "description": "admin.tests.api.routes.users.test_invite_user",
        "peekOfCode": "class TestInviteUser(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_invite_user.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.users.test_invite_user",
        "documentation": {}
    },
    {
        "label": "TestResetPassword",
        "kind": 6,
        "importPath": "admin.tests.api.routes.users.test_reset_password",
        "description": "admin.tests.api.routes.users.test_reset_password",
        "peekOfCode": "class TestResetPassword(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_reset_password.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.users.test_reset_password",
        "documentation": {}
    },
    {
        "label": "TestSetPassword",
        "kind": 6,
        "importPath": "admin.tests.api.routes.users.test_set_password",
        "description": "admin.tests.api.routes.users.test_set_password",
        "peekOfCode": "class TestSetPassword(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_set_password.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/x-www-form-urlencoded'",
        "detail": "admin.tests.api.routes.users.test_set_password",
        "documentation": {}
    },
    {
        "label": "TestUpdateUser",
        "kind": 6,
        "importPath": "admin.tests.api.routes.users.test_update_user",
        "description": "admin.tests.api.routes.users.test_update_user",
        "peekOfCode": "class TestUpdateUser(BaseTestCase):\n    def setUp(self) -> None:\n        self.maxDiff = None\n        test_client = FastAPITestClient(app=app)\n        path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__')\n        self.path_to_test_cases = 'test_update_user.json'\n        self.runner = TestCaseRunner(\n            client=test_client,\n            path_to_scenarios_dir=path_to_scenarios_dir,\n            default_content_type='application/json'",
        "detail": "admin.tests.api.routes.users.test_update_user",
        "documentation": {}
    },
    {
        "label": "BaseTestCase",
        "kind": 6,
        "importPath": "admin.tests.api.base_test_case",
        "description": "admin.tests.api.base_test_case",
        "peekOfCode": "class BaseTestCase(TestCase):\n    def run_test_with_user(\n        self,\n        runner: TestCaseRunner,\n        path_to_test_cases: str,\n        test_name: str,\n        user: utils.User,\n        url_params: dict[str, Any] | None = None,\n        test_data_modifier: Callable[[TestData], TestData] | None = None,\n        request_json_modifiers: dict[str, Any] | None = None,",
        "detail": "admin.tests.api.base_test_case",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "kind": 6,
        "importPath": "admin.tests.api.fastapi_test_client",
        "description": "admin.tests.api.fastapi_test_client",
        "peekOfCode": "class FastAPITestClient(BaseTestClient):\n    def __init__(self, app: FastAPI):\n        self.test_client = testclient.TestClient(app)\n    async def wait_startup(self) -> None:\n        await self.test_client.wait_startup()\n    def get(\n        self,\n        url: str,\n        timeout: int,\n        allow_redirects: bool,",
        "detail": "admin.tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "class User(BaseModel):\n    email: EmailStr = 'test.user@gmail.com'\n    name: str = 'Test User'\n    role: UserRole = UserRole.OWNER\n    projects: list[int] = []\n    status: UserStatus = UserStatus.ACTIVATED\n    password: str = 'Test123!'\n    set_password_token: str | None = None\n    @property\n    def hashed_password(self) -> str:",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "Project",
        "kind": 6,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "class Project(BaseModel):\n    name: str = 'Project #1'\n    private_key: str = 'private_key'\nclass FeatureFlag(BaseModel):\n    name: str = 'Enable some feature'\n    description: str = 'This flag enables some feature'\n    enabled: bool = True\n    conditions: list[list[FeatureFlagCondition]] = []\nclass ContextField(BaseModel):\n    name: str = 'Context Field #1'",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "FeatureFlag",
        "kind": 6,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "class FeatureFlag(BaseModel):\n    name: str = 'Enable some feature'\n    description: str = 'This flag enables some feature'\n    enabled: bool = True\n    conditions: list[list[FeatureFlagCondition]] = []\nclass ContextField(BaseModel):\n    name: str = 'Context Field #1'\n    description: str = 'This is a context field'\n    field_key: str = 'context_field'\n    value_type: ContextValueType = ContextValueType.STRING",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "ContextField",
        "kind": 6,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "class ContextField(BaseModel):\n    name: str = 'Context Field #1'\n    description: str = 'This is a context field'\n    field_key: str = 'context_field'\n    value_type: ContextValueType = ContextValueType.STRING\n    enum_def: dict[str, Any] | None = None\nclass SystemAuditLog(BaseModel):\n    event_type: AuditLogEventType\n    actor: str = 'owner@flag.ship'\n    details: str | None = None",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "SystemAuditLog",
        "kind": 6,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "class SystemAuditLog(BaseModel):\n    event_type: AuditLogEventType\n    actor: str = 'owner@flag.ship'\n    details: str | None = None\nclass FeatureFlagAuditLog(BaseModel):\n    actor: str = 'owner@flag.ship'\n    name: str = 'Feature Flag #1'\n    description: str = 'This is a feature flag'\n    conditions: list[list[FeatureFlagCondition]] = []\n    enabled: bool = True",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "FeatureFlagAuditLog",
        "kind": 6,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "class FeatureFlagAuditLog(BaseModel):\n    actor: str = 'owner@flag.ship'\n    name: str = 'Feature Flag #1'\n    description: str = 'This is a feature flag'\n    conditions: list[list[FeatureFlagCondition]] = []\n    enabled: bool = True\nclass ContextFieldAuditLog(BaseModel):\n    actor: str = 'owner@flag.ship'\n    name: str = 'Context Field #1'\n    description: str = 'This is a context field'",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "ContextFieldAuditLog",
        "kind": 6,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "class ContextFieldAuditLog(BaseModel):\n    actor: str = 'owner@flag.ship'\n    name: str = 'Context Field #1'\n    description: str = 'This is a context field'\n    enum_def: dict[str, Any] | None = None\n@contextlib.contextmanager\ndef new_user(user: User) -> Generator[UserRow, None, None]:\n    user_row = UserRow(\n        email=user.email,\n        name=user.name,",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "new_user",
        "kind": 2,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "def new_user(user: User) -> Generator[UserRow, None, None]:\n    user_row = UserRow(\n        email=user.email,\n        name=user.name,\n        role=user.role.value,\n        status=user.status.value,\n        password=user.hashed_password,\n        set_password_token=user.set_password_token\n    )\n    try:",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "new_project",
        "kind": 2,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "def new_project(project: Project) -> Generator[ProjectRow, None, None]:\n    project_row = ProjectRow(\n        name=project.name\n    )\n    try:\n        with MySQLService.get_session() as session:\n            session.add(project_row)\n            session.flush()\n            session.add(ProjectPrivateKeyRow(\n                project_id=project_row.project_id,",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "new_feature_flag",
        "kind": 2,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "def new_feature_flag(project_id: int, feature_flag: FeatureFlag) -> Generator[FeatureFlagRow, None, None]:\n    conditions = ujson.dumps([\n        [condition.model_dump() for condition in and_group]\n        for and_group in feature_flag.conditions\n    ])\n    feature_flag_row = FeatureFlagRow(\n        project_id=project_id,\n        name=feature_flag.name,\n        description=feature_flag.description,\n        conditions=conditions,",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "new_context_field",
        "kind": 2,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "def new_context_field(project_id: int, context_field: ContextField) -> Generator[ContextFieldRow, None, None]:\n    enum_def = ujson.dumps(context_field.enum_def) if context_field.enum_def else None\n    context_field_row = ContextFieldRow(\n        project_id=project_id,\n        name=context_field.name,\n        description=context_field.description,\n        field_key=context_field.field_key,\n        value_type=context_field.value_type.value,\n        enum_def=enum_def\n    )",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "new_system_audit_log",
        "kind": 2,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "def new_system_audit_log(audit_log: SystemAuditLog) -> Generator[SystemAuditLogRow, None, None]:\n    row = SystemAuditLogRow(\n        actor=audit_log.actor,\n        event_type=audit_log.event_type.value,\n        details=audit_log.details\n    )\n    try:\n        with MySQLService.get_session() as session:\n            session.add(row)\n            session.commit()",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "new_feature_flag_audit_log",
        "kind": 2,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "def new_feature_flag_audit_log(\n    project_id: int,\n    feature_flag_id: int,\n    audit_log: FeatureFlagAuditLog\n) -> Generator[FeatureFlagAuditLogRow, None, None]:\n    conditions = ujson.dumps([\n        [condition.model_dump() for condition in and_group]\n        for and_group in audit_log.conditions\n    ])\n    row = FeatureFlagAuditLogRow(",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "new_context_field_audit_log",
        "kind": 2,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "def new_context_field_audit_log(\n    project_id: int,\n    context_field_id: int,\n    audit_log: ContextFieldAuditLog\n) -> Generator[ContextFieldAuditLogRow, None, None]:\n    enum_def = ujson.dumps(audit_log.enum_def) if audit_log.enum_def else None\n    row = ContextFieldAuditLogRow(\n        context_field_id=context_field_id,\n        project_id=project_id,\n        actor=audit_log.actor,",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "clear_database",
        "kind": 2,
        "importPath": "admin.tests.api.utils",
        "description": "admin.tests.api.utils",
        "peekOfCode": "def clear_database() -> None:\n    # TODO: Clear Redis also...\n    with MySQLService.get_session() as session:\n        session.execute(delete(UserRow))\n        session.execute(delete(ProjectRow))\n        session.execute(delete(SystemAuditLogRow))\n        session.commit()",
        "detail": "admin.tests.api.utils",
        "documentation": {}
    },
    {
        "label": "TestContextFieldsCommon",
        "kind": 6,
        "importPath": "admin.tests.unit.api.routes.context_fields.test_common",
        "description": "admin.tests.unit.api.routes.context_fields.test_common",
        "peekOfCode": "class TestContextFieldsCommon(unittest.TestCase):\n    def test_validate_enum_def__pass(self) -> None:\n        params: Any = [\n            None,\n            {'a': 1, 'b': 2},\n            {'a': 1.2, 'b': 2.3},\n            {'a': 'A', 'b': 'B'}\n        ]\n        for enum_def in params:\n            with self.subTest(enum_def=enum_def):",
        "detail": "admin.tests.unit.api.routes.context_fields.test_common",
        "documentation": {}
    },
    {
        "label": "TestFeatureFlagsCommon",
        "kind": 6,
        "importPath": "admin.tests.unit.api.routes.feature_flags.test_common",
        "description": "admin.tests.unit.api.routes.feature_flags.test_common",
        "peekOfCode": "class TestFeatureFlagsCommon(unittest.TestCase):\n    def test_validate_and_group__pass(self) -> None:\n        common._validate_and_group(and_group=[\n            FeatureFlagCondition(\n                context_key='blah',\n                operator=Operator.EQUALS,\n                value='1'\n            ),\n            FeatureFlagCondition(\n                context_key='blah2',",
        "detail": "admin.tests.unit.api.routes.feature_flags.test_common",
        "documentation": {}
    },
    {
        "label": "AppException",
        "kind": 6,
        "importPath": "flags.app.api.exceptions.exceptions",
        "description": "flags.app.api.exceptions.exceptions",
        "peekOfCode": "class AppException(Exception):\n    STATUS: int = status.HTTP_500_INTERNAL_SERVER_ERROR\n    CODE: str = 'UNKNOWN'\n    def __init__(self, message: str | None = None):\n        message = message or StringsService.get(key=self.CODE)\n        super().__init__(message)\nclass NotFoundException(AppException):\n    STATUS: int = status.HTTP_404_NOT_FOUND\n    CODE: str = 'NOT_FOUND'\nclass UnauthenticatedException(AppException):",
        "detail": "flags.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "kind": 6,
        "importPath": "flags.app.api.exceptions.exceptions",
        "description": "flags.app.api.exceptions.exceptions",
        "peekOfCode": "class NotFoundException(AppException):\n    STATUS: int = status.HTTP_404_NOT_FOUND\n    CODE: str = 'NOT_FOUND'\nclass UnauthenticatedException(AppException):\n    STATUS: int = status.HTTP_401_UNAUTHORIZED\n    CODE: str = 'UNAUTHENTICATED'\nclass UnauthorizedException(AppException):\n    STATUS: int = status.HTTP_403_FORBIDDEN\n    CODE: str = 'UNAUTHORIZED'\nclass BadRequestException(AppException):",
        "detail": "flags.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthenticatedException",
        "kind": 6,
        "importPath": "flags.app.api.exceptions.exceptions",
        "description": "flags.app.api.exceptions.exceptions",
        "peekOfCode": "class UnauthenticatedException(AppException):\n    STATUS: int = status.HTTP_401_UNAUTHORIZED\n    CODE: str = 'UNAUTHENTICATED'\nclass UnauthorizedException(AppException):\n    STATUS: int = status.HTTP_403_FORBIDDEN\n    CODE: str = 'UNAUTHORIZED'\nclass BadRequestException(AppException):\n    STATUS: int = status.HTTP_400_BAD_REQUEST\nclass BadRequestFieldException(BadRequestException):\n    def __init__(self, field: str, message: str | None = None):",
        "detail": "flags.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "kind": 6,
        "importPath": "flags.app.api.exceptions.exceptions",
        "description": "flags.app.api.exceptions.exceptions",
        "peekOfCode": "class UnauthorizedException(AppException):\n    STATUS: int = status.HTTP_403_FORBIDDEN\n    CODE: str = 'UNAUTHORIZED'\nclass BadRequestException(AppException):\n    STATUS: int = status.HTTP_400_BAD_REQUEST\nclass BadRequestFieldException(BadRequestException):\n    def __init__(self, field: str, message: str | None = None):\n        self.field = field\n        super().__init__(message)\nclass AggregateException(BadRequestException):",
        "detail": "flags.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequestException",
        "kind": 6,
        "importPath": "flags.app.api.exceptions.exceptions",
        "description": "flags.app.api.exceptions.exceptions",
        "peekOfCode": "class BadRequestException(AppException):\n    STATUS: int = status.HTTP_400_BAD_REQUEST\nclass BadRequestFieldException(BadRequestException):\n    def __init__(self, field: str, message: str | None = None):\n        self.field = field\n        super().__init__(message)\nclass AggregateException(BadRequestException):\n    def __init__(self, exceptions: list[AppException]):\n        self.exceptions = exceptions",
        "detail": "flags.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequestFieldException",
        "kind": 6,
        "importPath": "flags.app.api.exceptions.exceptions",
        "description": "flags.app.api.exceptions.exceptions",
        "peekOfCode": "class BadRequestFieldException(BadRequestException):\n    def __init__(self, field: str, message: str | None = None):\n        self.field = field\n        super().__init__(message)\nclass AggregateException(BadRequestException):\n    def __init__(self, exceptions: list[AppException]):\n        self.exceptions = exceptions",
        "detail": "flags.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "AggregateException",
        "kind": 6,
        "importPath": "flags.app.api.exceptions.exceptions",
        "description": "flags.app.api.exceptions.exceptions",
        "peekOfCode": "class AggregateException(BadRequestException):\n    def __init__(self, exceptions: list[AppException]):\n        self.exceptions = exceptions",
        "detail": "flags.app.api.exceptions.exceptions",
        "documentation": {}
    },
    {
        "label": "exception_handler",
        "kind": 2,
        "importPath": "flags.app.api.exceptions.handlers",
        "description": "flags.app.api.exceptions.handlers",
        "peekOfCode": "def exception_handler(_: Request, __: Exception) -> JSONResponse:\n    return JSONResponse(\n        status_code=500,\n        content={\n            'errors': [\n                {\n                    'code': AppException.CODE,\n                    'msg': StringsService.get(key=AppException.CODE)\n                }\n            ]",
        "detail": "flags.app.api.exceptions.handlers",
        "documentation": {}
    },
    {
        "label": "app_exception_handler",
        "kind": 2,
        "importPath": "flags.app.api.exceptions.handlers",
        "description": "flags.app.api.exceptions.handlers",
        "peekOfCode": "def app_exception_handler(_: Request, e: AppException) -> JSONResponse:\n    errors = []\n    exceptions = e.exceptions if isinstance(e, AggregateException) else [e]\n    for exc in exceptions:\n        if isinstance(exc, BadRequestFieldException):\n            errors.append({\n                'field': exc.field,\n                'code': exc.CODE,\n                'message': str(exc)\n            })",
        "detail": "flags.app.api.exceptions.handlers",
        "documentation": {}
    },
    {
        "label": "request_validation_exception_handler",
        "kind": 2,
        "importPath": "flags.app.api.exceptions.handlers",
        "description": "flags.app.api.exceptions.handlers",
        "peekOfCode": "def request_validation_exception_handler(_: Request, e: RequestValidationError) -> JSONResponse:\n    # TODO: Handle i18n\n    formatted_errors = []\n    for error in e.errors():\n        error_code, message = error['type'], error['msg']\n        field = error['loc'][1]\n        message = _make_user_friendly(error_code=error_code, field=field, message=message)\n        formatted_errors.append({\n            'field': field,\n            'code': error_code.upper(),",
        "detail": "flags.app.api.exceptions.handlers",
        "documentation": {}
    },
    {
        "label": "jwt_exception_handler",
        "kind": 2,
        "importPath": "flags.app.api.exceptions.handlers",
        "description": "flags.app.api.exceptions.handlers",
        "peekOfCode": "def jwt_exception_handler(_: Request, __: AuthJWTException) -> JSONResponse:\n    return JSONResponse(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        content={\n            'errors': [{\n                'code': UnauthenticatedException.CODE,\n                'message': StringsService.get(key=AppException.CODE)\n            }]\n        }\n    )",
        "detail": "flags.app.api.exceptions.handlers",
        "documentation": {}
    },
    {
        "label": "StringsService",
        "kind": 6,
        "importPath": "flags.app.services.strings.service",
        "description": "flags.app.services.strings.service",
        "peekOfCode": "class StringsService:\n    DEFAULT_LOCALE: str\n    LOOKUP: Final[dict[str, dict[str, str]]] = {}\n    @classmethod\n    def init(cls, default_locale: str) -> None:\n        file_path = os.path.join(os.path.dirname(__file__), '../../../config/strings.json')\n        with open(file_path) as file:\n            cls.LOOKUP.update(ujson.loads(file.read()))\n        cls.DEFAULT_LOCALE = default_locale\n    @classmethod",
        "detail": "flags.app.services.strings.service",
        "documentation": {}
    },
    {
        "label": "FastAPITestClient",
        "kind": 6,
        "importPath": "flags.tests.api.fastapi_test_client",
        "description": "flags.tests.api.fastapi_test_client",
        "peekOfCode": "class FastAPITestClient(BaseTestClient):\n    def __init__(self, app: FastAPI):\n        self.test_client = testclient.TestClient(app)\n    async def wait_startup(self) -> None:\n        await self.test_client.wait_startup()\n    def get(\n        self,\n        url: str,\n        timeout: int,\n        allow_redirects: bool,",
        "detail": "flags.tests.api.fastapi_test_client",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    }
]