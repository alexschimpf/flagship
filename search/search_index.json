{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Flagship is a full-stack feature flag management platform. How It Works Flagship provides an intuitive web application to manage your feature flags. A project typically maps to a specific system, e.g. a web app or backend system. Within a project, you can create feature flags . You can configure feature flags to only be enabled under certain conditions. You can also create context fields within a project. Context fields describe the context when resolving which feature flags are enabled. For example, suppose you have a website that you want to control with feature flags. When you ask the Flagship API to determine which feature flags are enabled for the current user, you need to describe the user to Flagship. So you may do this by providing the following context fields to Flagship: `user_id` and `country_code`. You would create a separate context field for each and tell Flagship their types (i.e. integer and string). You can then use these context fields in your feature flag conditions. For example, you could have conditions like: ( `user_id` is one of [1,2,3] AND `country_code` is not \"US\" ) OR ( `country_code` is \"US\" ) Context fields can be assigned the following types: integer, number, string, boolean, semantic version, integer list, string list, and enum list. Most operations done via the UI are recorded via audit logs. For example, you can see a history of changes for a particular feature flag. The Flagship web application also allows you to effectively manage users within the platform. Users must be invited from within Flagship. Each user is given a role and is assigned to one or more projects. The following roles are available (in order of increasing permissions): read only, standard, admin, and owner. Getting Started Running From Source To run Flagship from source, follow these steps: Make sure you have the latest version of Docker installed and running git clone git@github.com:alexschimpf/flagship.git cd flagship make -C docker flagship This will run the UI server, Admin API, Flags API, MySQL, and Redis Cluster via docker-compose Open https://localhost:3000 in your browser Log in with user owner@flag.ship and password: Test123! Production To run Flagship in production, you can use the following images from Dockerhub: Name Image UI Server alexschimpf/flagship-frontend:latest Admin API alexschimpf/flagship-admin:latest Flags API alexschimpf/flagship-flags:latest To configure these appropriately, please read Installation . To learn more about connecting your system to Flagship, please read SDK . Example You can find a complete example project using the Flagship platform here . Components UI Server Runs the Flagship UI Admin API API server used by the Flagship UI Deals with: Login / Authentication Managing projects Managing context fields Managing feature flags Managing users Reading/writing audit logs etc. Flags API Handles determining which feature flags are enabled for a given context This is what your system will be interacting with Screenshots Homepage Members Project Private Keys System Audit Logs Feature Flags Edit Feature Flag Feature Flag Audit Logs Context Fields Edit Context Field Context Field Audit Logs Light Mode","title":"Overview"},{"location":"#overview","text":"Flagship is a full-stack feature flag management platform.","title":"Overview"},{"location":"#how-it-works","text":"Flagship provides an intuitive web application to manage your feature flags. A project typically maps to a specific system, e.g. a web app or backend system. Within a project, you can create feature flags . You can configure feature flags to only be enabled under certain conditions. You can also create context fields within a project. Context fields describe the context when resolving which feature flags are enabled. For example, suppose you have a website that you want to control with feature flags. When you ask the Flagship API to determine which feature flags are enabled for the current user, you need to describe the user to Flagship. So you may do this by providing the following context fields to Flagship: `user_id` and `country_code`. You would create a separate context field for each and tell Flagship their types (i.e. integer and string). You can then use these context fields in your feature flag conditions. For example, you could have conditions like: ( `user_id` is one of [1,2,3] AND `country_code` is not \"US\" ) OR ( `country_code` is \"US\" ) Context fields can be assigned the following types: integer, number, string, boolean, semantic version, integer list, string list, and enum list. Most operations done via the UI are recorded via audit logs. For example, you can see a history of changes for a particular feature flag. The Flagship web application also allows you to effectively manage users within the platform. Users must be invited from within Flagship. Each user is given a role and is assigned to one or more projects. The following roles are available (in order of increasing permissions): read only, standard, admin, and owner.","title":"How It Works"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#running-from-source","text":"To run Flagship from source, follow these steps: Make sure you have the latest version of Docker installed and running git clone git@github.com:alexschimpf/flagship.git cd flagship make -C docker flagship This will run the UI server, Admin API, Flags API, MySQL, and Redis Cluster via docker-compose Open https://localhost:3000 in your browser Log in with user owner@flag.ship and password: Test123!","title":"Running From Source"},{"location":"#production","text":"To run Flagship in production, you can use the following images from Dockerhub: Name Image UI Server alexschimpf/flagship-frontend:latest Admin API alexschimpf/flagship-admin:latest Flags API alexschimpf/flagship-flags:latest To configure these appropriately, please read Installation . To learn more about connecting your system to Flagship, please read SDK .","title":"Production"},{"location":"#example","text":"You can find a complete example project using the Flagship platform here .","title":"Example"},{"location":"#components","text":"","title":"Components"},{"location":"#ui-server","text":"Runs the Flagship UI","title":"UI Server"},{"location":"#admin-api","text":"API server used by the Flagship UI Deals with: Login / Authentication Managing projects Managing context fields Managing feature flags Managing users Reading/writing audit logs etc.","title":"Admin API"},{"location":"#flags-api","text":"Handles determining which feature flags are enabled for a given context This is what your system will be interacting with","title":"Flags API"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#homepage","text":"","title":"Homepage"},{"location":"#members","text":"","title":"Members"},{"location":"#project-private-keys","text":"","title":"Project Private Keys"},{"location":"#system-audit-logs","text":"","title":"System Audit Logs"},{"location":"#feature-flags","text":"","title":"Feature Flags"},{"location":"#edit-feature-flag","text":"","title":"Edit Feature Flag"},{"location":"#feature-flag-audit-logs","text":"","title":"Feature Flag Audit Logs"},{"location":"#context-fields","text":"","title":"Context Fields"},{"location":"#edit-context-field","text":"","title":"Edit Context Field"},{"location":"#context-field-audit-logs","text":"","title":"Context Field Audit Logs"},{"location":"#light-mode","text":"","title":"Light Mode"},{"location":"admin-api/","text":"Admin API The Flagship UI uses the Admin API to do the following types of things: - Login / Authentication - Managing projects - Managing context fields - Managing feature flags - Managing users - Reading/writing audit logs - etc. Infrastructure The Admin API is written in Python 3.12 and runs on FastAPI. Dependencies The only external dependencies for the Admin API is Redis Cluster and MySQL. Redis Cluser stores cached data related to projects and feature flags. MySQL stores everything else. Authentication Authentication is done via JWT cookies assigned at login. Authorization All endpoints have the necessary role-based permissions checks. User roles are described on the Users page. Installation You can use the following Docker image from Dockerhub: alexschimpf/flagship-admin:latest You can read more about configuring this server in Installation .","title":"Admin API"},{"location":"admin-api/#admin-api","text":"The Flagship UI uses the Admin API to do the following types of things: - Login / Authentication - Managing projects - Managing context fields - Managing feature flags - Managing users - Reading/writing audit logs - etc.","title":"Admin API"},{"location":"admin-api/#infrastructure","text":"The Admin API is written in Python 3.12 and runs on FastAPI.","title":"Infrastructure"},{"location":"admin-api/#dependencies","text":"The only external dependencies for the Admin API is Redis Cluster and MySQL. Redis Cluser stores cached data related to projects and feature flags. MySQL stores everything else.","title":"Dependencies"},{"location":"admin-api/#authentication","text":"Authentication is done via JWT cookies assigned at login.","title":"Authentication"},{"location":"admin-api/#authorization","text":"All endpoints have the necessary role-based permissions checks. User roles are described on the Users page.","title":"Authorization"},{"location":"admin-api/#installation","text":"You can use the following Docker image from Dockerhub: alexschimpf/flagship-admin:latest You can read more about configuring this server in Installation .","title":"Installation"},{"location":"context-fields/","text":"Context Fields A context field exists within a single project. Context fields describe the context when resolving which feature flags are enabled. For example, suppose you have a website that you want to control with feature flags. When you ask the Flagship API to determine which feature flags are enabled for the current user, you need to describe the user to Flagship. So you may do this by providing the following context fields to Flagship: `user_id`` and `country_code`. You would create a separate context field for each and tell Flagship their types (i.e. integer and string). You can then use these context fields in your feature flag conditions. For example, you could have conditions like: ( `user_id` is one of [1,2,3] AND `country_code` is not \"US\" ) OR ( `country_code` is \"US\" ) Context fields can be assigned the following types: integer, number, string, boolean, semantic version, integer list, string list, and enum list. Field Keys Field keys are the actual keys you plan to pass to the Flags API. For example if your context includes a user ID, you could have a context field with field key `user_id`. This cannot be changed after a context field is created. In other words, field keys are only referenced by the Flags API, whereas the context field name is only relevant within the Flagship UI. Value Types A context field's value type describes what type of value it is expected to hold. For example, if you have a context field for a user's email address, it would have a \"string\" (i.e. text) value type. This cannot be changed after a context field is created. Integer Used for integers (e.g. 123). Operators inlude: IS, IS NOT IS ONE OF IS NOT ONE OF < <= > >= Number Used for floating point numbers (e.g. 1.23). Operators are the same as for Integer. String For text values (e.g. \"US\"). Operators include: IS IS NOT MATCHES IS ONE OF IS NOT ONE OF Boolean For boolean values (e.g. true and false). Operator include: IS IS NOT Semantic Version For semantic version strings (e.g. 1.2.3). Operators include: IS IS NOT < <= > >= Enum Enums are named strings or integers. For example, suppose your users can be assigned to one or more based groups, and these groups are identified by unique integer IDs. When you are configuring your feature flag conditions, you want the conditions to be as human friendly as possible. It may be confusing for someone to see conditions like: `groups` HAS ONE OF [3, 4] What is group 3? What is group 4? A way to improve on this is to use the enum value type for the `groups` context field. When you assign a context field to the enum value type, you must also define an Enum Definition . The enum definition should be a single-level JSON blob, where keys are strings and values are either all strings or all integer. The JSON keys represent the human-friendly enum names, whereas the values represent the values meant to be passed to the Flags API. So you may have something like this for your `groups` enum definition: { \"Read Only\": 1, \"Standard\": 2, \"Admin\": 3, \"Owner\": 4 } So now feature flag conditions will appear in the Flagship UI like so: `groups` HAS ONE OF [\"Admin\", \"Owner\"] Integer List For lists containing only integers (e.g. [1, 2, 3]). Operators include: HAS DOES NOT HAVE HAS ONE OF DOES NOT HAVE ONE OF String List For lists containing only strings (e.g. [\"a\", \"b\", \"c\"]). Operators include: HAS DOES NOT HAVE HAS ONE OF DOES NOT HAVE ONE OF Enum List For lists containing only enums. Enums are described above. Operators include: HAS DOES NOT HAVE HAS ONE OF DOES NOT HAVE ONE OF Audit Logs All changes made to context fields are recorded and can be viewed in the UI. You can see which users changed which fields and at what time.","title":"Context Fields"},{"location":"context-fields/#context-fields","text":"A context field exists within a single project. Context fields describe the context when resolving which feature flags are enabled. For example, suppose you have a website that you want to control with feature flags. When you ask the Flagship API to determine which feature flags are enabled for the current user, you need to describe the user to Flagship. So you may do this by providing the following context fields to Flagship: `user_id`` and `country_code`. You would create a separate context field for each and tell Flagship their types (i.e. integer and string). You can then use these context fields in your feature flag conditions. For example, you could have conditions like: ( `user_id` is one of [1,2,3] AND `country_code` is not \"US\" ) OR ( `country_code` is \"US\" ) Context fields can be assigned the following types: integer, number, string, boolean, semantic version, integer list, string list, and enum list.","title":"Context Fields"},{"location":"context-fields/#field-keys","text":"Field keys are the actual keys you plan to pass to the Flags API. For example if your context includes a user ID, you could have a context field with field key `user_id`. This cannot be changed after a context field is created. In other words, field keys are only referenced by the Flags API, whereas the context field name is only relevant within the Flagship UI.","title":"Field Keys"},{"location":"context-fields/#value-types","text":"A context field's value type describes what type of value it is expected to hold. For example, if you have a context field for a user's email address, it would have a \"string\" (i.e. text) value type. This cannot be changed after a context field is created.","title":"Value Types"},{"location":"context-fields/#integer","text":"Used for integers (e.g. 123). Operators inlude: IS, IS NOT IS ONE OF IS NOT ONE OF < <= > >=","title":"Integer"},{"location":"context-fields/#number","text":"Used for floating point numbers (e.g. 1.23). Operators are the same as for Integer.","title":"Number"},{"location":"context-fields/#string","text":"For text values (e.g. \"US\"). Operators include: IS IS NOT MATCHES IS ONE OF IS NOT ONE OF","title":"String"},{"location":"context-fields/#boolean","text":"For boolean values (e.g. true and false). Operator include: IS IS NOT","title":"Boolean"},{"location":"context-fields/#semantic-version","text":"For semantic version strings (e.g. 1.2.3). Operators include: IS IS NOT < <= > >=","title":"Semantic Version"},{"location":"context-fields/#enum","text":"Enums are named strings or integers. For example, suppose your users can be assigned to one or more based groups, and these groups are identified by unique integer IDs. When you are configuring your feature flag conditions, you want the conditions to be as human friendly as possible. It may be confusing for someone to see conditions like: `groups` HAS ONE OF [3, 4] What is group 3? What is group 4? A way to improve on this is to use the enum value type for the `groups` context field. When you assign a context field to the enum value type, you must also define an Enum Definition . The enum definition should be a single-level JSON blob, where keys are strings and values are either all strings or all integer. The JSON keys represent the human-friendly enum names, whereas the values represent the values meant to be passed to the Flags API. So you may have something like this for your `groups` enum definition: { \"Read Only\": 1, \"Standard\": 2, \"Admin\": 3, \"Owner\": 4 } So now feature flag conditions will appear in the Flagship UI like so: `groups` HAS ONE OF [\"Admin\", \"Owner\"]","title":"Enum"},{"location":"context-fields/#integer-list","text":"For lists containing only integers (e.g. [1, 2, 3]). Operators include: HAS DOES NOT HAVE HAS ONE OF DOES NOT HAVE ONE OF","title":"Integer List"},{"location":"context-fields/#string-list","text":"For lists containing only strings (e.g. [\"a\", \"b\", \"c\"]). Operators include: HAS DOES NOT HAVE HAS ONE OF DOES NOT HAVE ONE OF","title":"String List"},{"location":"context-fields/#enum-list","text":"For lists containing only enums. Enums are described above. Operators include: HAS DOES NOT HAVE HAS ONE OF DOES NOT HAVE ONE OF","title":"Enum List"},{"location":"context-fields/#audit-logs","text":"All changes made to context fields are recorded and can be viewed in the UI. You can see which users changed which fields and at what time.","title":"Audit Logs"},{"location":"development/","text":"Development If you are interested in contributing to this project, please email me at aschimpf1@gmail.com . Notes There are a number of Makefiles with most of the commands you'd need. make help will give you information about the available Makefile commands The docker folder's Makefile has various commands for running Flagship make -C docker dev will run all necessary containers with auto-reload and debug ports If you're planning to contribute, you'll want to run: make setup-dev This will install the pre-commit hook and install all necessary packages You'll want to use the latest version of node for UI dev You'll want to use Python 3.12+ for Admin API and Flags API dev","title":"Development"},{"location":"development/#development","text":"If you are interested in contributing to this project, please email me at aschimpf1@gmail.com .","title":"Development"},{"location":"development/#notes","text":"There are a number of Makefiles with most of the commands you'd need. make help will give you information about the available Makefile commands The docker folder's Makefile has various commands for running Flagship make -C docker dev will run all necessary containers with auto-reload and debug ports If you're planning to contribute, you'll want to run: make setup-dev This will install the pre-commit hook and install all necessary packages You'll want to use the latest version of node for UI dev You'll want to use Python 3.12+ for Admin API and Flags API dev","title":"Notes"},{"location":"example/","text":"Example You can find a complete example project using the Flagship platform here .","title":"Example"},{"location":"example/#example","text":"You can find a complete example project using the Flagship platform here .","title":"Example"},{"location":"feature-flags/","text":"Feature Flags Feature flags allow you to enable or disable features/functionality at runtime. They enable the gradual rollout of features, continuous deployment, A/B testing, quick rollbacks, and dark launches. In Flagship, each feature flag is given a name, description, and conditions, and can also be toggled on and off. If a feature flag is enabled but is given no conditions, it is essentially enabled for all. The name of each feature flag is its primary identifier. It is recommended to follow a consistent naming convention, e.g. lower or upper snake case. Conditions Conditions allow you to control when feature flags are enabled. Before setting feature flag conditions, you should first create one or more context fields . You can then build your conditions based off these. There are different operators that can be used based on the value type of a context field. Conditions can be joined together using AND/OR boolean operators to form more complex conditions. Audit Logs All changes made to feature flags are recorded and can be viewed in the UI. You can see which users changed which fields and at what time.","title":"Feature Flags"},{"location":"feature-flags/#feature-flags","text":"Feature flags allow you to enable or disable features/functionality at runtime. They enable the gradual rollout of features, continuous deployment, A/B testing, quick rollbacks, and dark launches. In Flagship, each feature flag is given a name, description, and conditions, and can also be toggled on and off. If a feature flag is enabled but is given no conditions, it is essentially enabled for all. The name of each feature flag is its primary identifier. It is recommended to follow a consistent naming convention, e.g. lower or upper snake case.","title":"Feature Flags"},{"location":"feature-flags/#conditions","text":"Conditions allow you to control when feature flags are enabled. Before setting feature flag conditions, you should first create one or more context fields . You can then build your conditions based off these. There are different operators that can be used based on the value type of a context field. Conditions can be joined together using AND/OR boolean operators to form more complex conditions.","title":"Conditions"},{"location":"feature-flags/#audit-logs","text":"All changes made to feature flags are recorded and can be viewed in the UI. You can see which users changed which fields and at what time.","title":"Audit Logs"},{"location":"flags-api/","text":"Flags API The Flags API is what your system interacts within to determine which feature flags are enabled for a given context. You can use an SDK if there is one avaiable for your programming language of choice. It should be trivial to support other programming languages or use your own implementation. Infrastructure The Flags API is written in Python 3.12 and runs on FastAPI. Dependencies The only external dependency for the Flags API is Redis Cluster. Redis Cluser stores cached data related to projects and feature flags. API To get all feature flags enabled for a given context, you can use the following endpoint: POST /feature_flags Body The POST body should contain the context data in JSON format. The keys should match the field keys of context fields you have created for your Flagship project. The values should match the value types of those context fields. Query Parameters project_id You can find this from the Flagship UI. user_key This is how you uniquely identify your users. For example, this could be a UUID or numeric user ID. Headers FLAGSHIP-SIGNATURE This is how Flags API requests are authenticated. This can be generated by an SDK . It is an HMAC signature based on the project's private key and the user key. Installation You can use the following Docker image from Dockerhub: alexschimpf/flagship-flags:latest You can read more about configuring this server in Installation .","title":"Flags API"},{"location":"flags-api/#flags-api","text":"The Flags API is what your system interacts within to determine which feature flags are enabled for a given context. You can use an SDK if there is one avaiable for your programming language of choice. It should be trivial to support other programming languages or use your own implementation.","title":"Flags API"},{"location":"flags-api/#infrastructure","text":"The Flags API is written in Python 3.12 and runs on FastAPI.","title":"Infrastructure"},{"location":"flags-api/#dependencies","text":"The only external dependency for the Flags API is Redis Cluster. Redis Cluser stores cached data related to projects and feature flags.","title":"Dependencies"},{"location":"flags-api/#api","text":"To get all feature flags enabled for a given context, you can use the following endpoint: POST /feature_flags","title":"API"},{"location":"flags-api/#body","text":"The POST body should contain the context data in JSON format. The keys should match the field keys of context fields you have created for your Flagship project. The values should match the value types of those context fields.","title":"Body"},{"location":"flags-api/#query-parameters","text":"project_id You can find this from the Flagship UI. user_key This is how you uniquely identify your users. For example, this could be a UUID or numeric user ID.","title":"Query Parameters"},{"location":"flags-api/#headers","text":"FLAGSHIP-SIGNATURE This is how Flags API requests are authenticated. This can be generated by an SDK . It is an HMAC signature based on the project's private key and the user key.","title":"Headers"},{"location":"flags-api/#installation","text":"You can use the following Docker image from Dockerhub: alexschimpf/flagship-flags:latest You can read more about configuring this server in Installation .","title":"Installation"},{"location":"installation/","text":"Installation There are various components to the Flagship platform that must be configured and installed appropriately. They will be described below. MySQL All Flagship data is stored in MySQL. This is currently the only primary database that can be used. To use your own MySQL database, you must perform the following bootstrap steps: Create a flagship database. See here . Execute the statements listed here . This will create all necessary tables. Create an initial Flagship owner user. See here . This will create a user with username owner@flag.ship and password Test123! . You can modify the email as needed. It is recommended to reset your password from the UI. The latest MySQL version is recommended. Redis Cluster Some Flagship data is cached in Redis Cluster. This is primarily to make the Flags API faster. The following data is stored here: Encrypted project private keys Feature flags Context field keys and value types The latest Redis Cluster version is recommended. Admin API The Admin API is described in detail here . You can use the following Docker image from Dockerhub: alexschimpf/flagship-admin:latest This is the easiest way to get the Admin API up and running. The full list of config options is defined here . The docker container can be configured by a number of environment variables. If certain environment variables are not specifically defined, a warning message will be logged on startup. Variable Name Notes Default SECRET_KEY Used to encrypt JWT tokens and project private keys. This should be a long random string with a length that is a multiple of 4. -- MYSQL_ECHO If truthy, all MySQL statements will be logged. This should definitely be disabled in production. 1 MYSQL_ISOLATION_LEVEL MySQL transaction isolation level READ COMMITTED MYSQL_POOL_SIZE See here 5 MYSQL_MAX_OVERFLOW See here 10 MYSQL_CONN_STR Should follow the following format: mysql+mysqlconnector://USER:PASSWORD@HOSTNAME:PORT/flagship -- REDIS_CONN_STR Should follow the following format: redis://HOSTNAME:PORT -- UI_BASE_URL The UI base URL. This should NOT end with a trailing slash. http://localhost:3000 SESSION_COOKIE_KEY The login session cookie key name flagship-session SESSION_COOKIE_MAX_AGE Login session cookie max age (in seconds) 86400 (i.e. 24 hours) SESSION_COOKIE_DOMAIN The domain name tied to your login session cookie localhost CORS_ALLOW_ORIGINS A comma-separated list of allowed origins for CORS. Your Flagship UI base URL should be listed here. http://localhost:3000 SET_PASSWORD_TOKEN_TTL How long a password reset token lives before becoming invalid 86400 (i.e. 24 hours) ENABLE_FAKE_AUTH This is used to skip authentication checks during testing. This should definitely be disabled in production. False DEFAULT_LOCALE Currently this doesn't have any effect because \"en-us\" is the only supported locale. en-us SMTP_HOST SMTP server hostname. Used for sending emails from Flagship. -- SMTP_PORT SMTP server port. Used for sending emails from Flagship. -- SMTP_USER SMTP server user. Used for sending emails from Flagship. -- SMTP_PASSWORD SMTP server password. Used for sending emails from Flagship. -- EMAIL_FROM_ADDRESS This is the \"From\" email address used for emails from Flagship. This address should be owned by you. -- Flags API The Flags API is described in detail here . You can use the following Docker image from Dockerhub: alexschimpf/flagship-flags:latest This is the easiest way to get the Flags API up and running. The full list of config options is defined here . The docker container can be configured by a number of environment variables. If certain environment variables are not specifically defined, a warning message will be logged on startup. Variable Name Notes Default SECRET_KEY Used to encrypt JWT tokens and project private keys. This should be a long random string with a length that is a multiple of 4. -- REDIS_CONN_STR Should follow the following format: redis://HOSTNAME:PORT -- CORS_ALLOW_ORIGINS A comma-separated list of allowed origins for CORS. If you are interacting with the Flags API from a browser, this should be set to your website's base URL. http://localhost:3000 DEFAULT_LOCALE Currently this doesn't have any effect because \"en-us\" is the only supported locale. en-us UI The UI is described in detail here . You can use the following Docker image from Dockerhub: alexschimpf/flagship-frontend:latest The docker container can be configured using the following environment variables: Variable Name Notes Default API_BASE_URL Base URL of the Admin API http://localhost:8000 SDK To connect your system to Flagship's Flags API, you can use an available SDK . There are currently 2 supported SDKs - one for Javascript and one for Python. It should be trivial to support other programming languages or use your own implementation. Example Project See an example project here .","title":"Installation"},{"location":"installation/#installation","text":"There are various components to the Flagship platform that must be configured and installed appropriately. They will be described below.","title":"Installation"},{"location":"installation/#mysql","text":"All Flagship data is stored in MySQL. This is currently the only primary database that can be used. To use your own MySQL database, you must perform the following bootstrap steps: Create a flagship database. See here . Execute the statements listed here . This will create all necessary tables. Create an initial Flagship owner user. See here . This will create a user with username owner@flag.ship and password Test123! . You can modify the email as needed. It is recommended to reset your password from the UI. The latest MySQL version is recommended.","title":"MySQL"},{"location":"installation/#redis-cluster","text":"Some Flagship data is cached in Redis Cluster. This is primarily to make the Flags API faster. The following data is stored here: Encrypted project private keys Feature flags Context field keys and value types The latest Redis Cluster version is recommended.","title":"Redis Cluster"},{"location":"installation/#admin-api","text":"The Admin API is described in detail here . You can use the following Docker image from Dockerhub: alexschimpf/flagship-admin:latest This is the easiest way to get the Admin API up and running. The full list of config options is defined here . The docker container can be configured by a number of environment variables. If certain environment variables are not specifically defined, a warning message will be logged on startup. Variable Name Notes Default SECRET_KEY Used to encrypt JWT tokens and project private keys. This should be a long random string with a length that is a multiple of 4. -- MYSQL_ECHO If truthy, all MySQL statements will be logged. This should definitely be disabled in production. 1 MYSQL_ISOLATION_LEVEL MySQL transaction isolation level READ COMMITTED MYSQL_POOL_SIZE See here 5 MYSQL_MAX_OVERFLOW See here 10 MYSQL_CONN_STR Should follow the following format: mysql+mysqlconnector://USER:PASSWORD@HOSTNAME:PORT/flagship -- REDIS_CONN_STR Should follow the following format: redis://HOSTNAME:PORT -- UI_BASE_URL The UI base URL. This should NOT end with a trailing slash. http://localhost:3000 SESSION_COOKIE_KEY The login session cookie key name flagship-session SESSION_COOKIE_MAX_AGE Login session cookie max age (in seconds) 86400 (i.e. 24 hours) SESSION_COOKIE_DOMAIN The domain name tied to your login session cookie localhost CORS_ALLOW_ORIGINS A comma-separated list of allowed origins for CORS. Your Flagship UI base URL should be listed here. http://localhost:3000 SET_PASSWORD_TOKEN_TTL How long a password reset token lives before becoming invalid 86400 (i.e. 24 hours) ENABLE_FAKE_AUTH This is used to skip authentication checks during testing. This should definitely be disabled in production. False DEFAULT_LOCALE Currently this doesn't have any effect because \"en-us\" is the only supported locale. en-us SMTP_HOST SMTP server hostname. Used for sending emails from Flagship. -- SMTP_PORT SMTP server port. Used for sending emails from Flagship. -- SMTP_USER SMTP server user. Used for sending emails from Flagship. -- SMTP_PASSWORD SMTP server password. Used for sending emails from Flagship. -- EMAIL_FROM_ADDRESS This is the \"From\" email address used for emails from Flagship. This address should be owned by you. --","title":"Admin API"},{"location":"installation/#flags-api","text":"The Flags API is described in detail here . You can use the following Docker image from Dockerhub: alexschimpf/flagship-flags:latest This is the easiest way to get the Flags API up and running. The full list of config options is defined here . The docker container can be configured by a number of environment variables. If certain environment variables are not specifically defined, a warning message will be logged on startup. Variable Name Notes Default SECRET_KEY Used to encrypt JWT tokens and project private keys. This should be a long random string with a length that is a multiple of 4. -- REDIS_CONN_STR Should follow the following format: redis://HOSTNAME:PORT -- CORS_ALLOW_ORIGINS A comma-separated list of allowed origins for CORS. If you are interacting with the Flags API from a browser, this should be set to your website's base URL. http://localhost:3000 DEFAULT_LOCALE Currently this doesn't have any effect because \"en-us\" is the only supported locale. en-us","title":"Flags API"},{"location":"installation/#ui","text":"The UI is described in detail here . You can use the following Docker image from Dockerhub: alexschimpf/flagship-frontend:latest The docker container can be configured using the following environment variables: Variable Name Notes Default API_BASE_URL Base URL of the Admin API http://localhost:8000","title":"UI"},{"location":"installation/#sdk","text":"To connect your system to Flagship's Flags API, you can use an available SDK . There are currently 2 supported SDKs - one for Javascript and one for Python. It should be trivial to support other programming languages or use your own implementation.","title":"SDK"},{"location":"installation/#example-project","text":"See an example project here .","title":"Example Project"},{"location":"projects/","text":"Projects A project typically maps to a specific system, e.g. a web app or backend system. Within a project, you can create feature flags and context fields . Users are assigned to one or more projects. The Flagship homepage lists all available projects that are assigned to the current user. You can easily navigate to the feature flags, context fields, and private keys from here. From the homepage, you can also create a new project. Private Keys Projects can be assigned one or more private keys. Private keys are only ever shown at the time of creation, so remember to save them some place secure! Private keys are needed to sign requests to the Flags API . All private keys for a project are active at any given time. If you want to rotate keys, simply create a new private key, modify your system to use it, and then delete the old one.","title":"Projects"},{"location":"projects/#projects","text":"A project typically maps to a specific system, e.g. a web app or backend system. Within a project, you can create feature flags and context fields . Users are assigned to one or more projects. The Flagship homepage lists all available projects that are assigned to the current user. You can easily navigate to the feature flags, context fields, and private keys from here. From the homepage, you can also create a new project.","title":"Projects"},{"location":"projects/#private-keys","text":"Projects can be assigned one or more private keys. Private keys are only ever shown at the time of creation, so remember to save them some place secure! Private keys are needed to sign requests to the Flags API . All private keys for a project are active at any given time. If you want to rotate keys, simply create a new private key, modify your system to use it, and then delete the old one.","title":"Private Keys"},{"location":"sdk/","text":"SDKs The Flagship SDK allows you to easily connect your system with Flagship. They are small libraries that make requests to the Flags API. There are currently 2 supported SDKs - one for Javascript and one for Python. It should be trivial to support other programming languages or use your own implementation. Javascript Install npm install flagship-sdk Browser Example import Flagship from 'flagship'; // Get auth signature from server const signature = ... /* Note: Your user key can be whatever you want to distinctly identify a user, as long as it's a string */ const flagship = Flagship( 'example.com', // host 1, // project id 'user-123', // user key signature // auth signature ) context = { accountId: 39, countryCode: 'US' }; /* This should be called whenever the context changes. This makes a request to the Flags API. */ flagship.load(context); const enabledFeatureFlags = flagship.getEnabledFeatureFlags(); Server Example import Flagship from 'flagship'; /* Note: Your user key can be whatever you want to distinctly identify a user, as long as it's a string */ const flagship = Flagship( 'example.com', // host 1, // project id 'user-123', // user key null, // no signature is needed since the private key is given below privateKey // this should be kept somewhere secure ); context = { accountId: 39, countryCode: 'US' }; /* This should be called whenever the context changes. This makes a request to the Flags API. */ flagship.load(context); const enabledFeatureFlags = flagship.getEnabledFeatureFlags(); Python Install pip install flagship_sdk Example from flagship import Flagship # Get private key from some place secure private_key = ... # Note: Your user key can be whatever you want to distinctly # identify a user, as long as it's a string flagship = Flagship( host='example.com', project_id=1, user_key='user-123', private_key=private_key ) context = { account_id: 39, country_code: 'US' } # This should be called whenever the context changes. # This makes a request to the Flags API. flagship.load(context) enabled_feature_flags = flagship.get_enabled_feature_flags() Generating Signatures To generate an auth signature for Flagship, you need to know the private key. Doing this on the browser is not secure since anyone can inspect your Javascript and see your system's private key. To get around this, you can keep the private key securel server-side, generate the signature there, and send it to the client, without ever exposing the private key. from flagship import Flagship def your_endpoint(): # Get private key from some place secure private_key = ... flagship = Flagship( host='example.com', project_id=1, user_key='user-123', private_key=private_key ) return { 'signature': flagship.generate_signature() }","title":"SDK"},{"location":"sdk/#sdks","text":"The Flagship SDK allows you to easily connect your system with Flagship. They are small libraries that make requests to the Flags API. There are currently 2 supported SDKs - one for Javascript and one for Python. It should be trivial to support other programming languages or use your own implementation.","title":"SDKs"},{"location":"sdk/#javascript","text":"","title":"Javascript"},{"location":"sdk/#install","text":"npm install flagship-sdk","title":"Install"},{"location":"sdk/#browser-example","text":"import Flagship from 'flagship'; // Get auth signature from server const signature = ... /* Note: Your user key can be whatever you want to distinctly identify a user, as long as it's a string */ const flagship = Flagship( 'example.com', // host 1, // project id 'user-123', // user key signature // auth signature ) context = { accountId: 39, countryCode: 'US' }; /* This should be called whenever the context changes. This makes a request to the Flags API. */ flagship.load(context); const enabledFeatureFlags = flagship.getEnabledFeatureFlags();","title":"Browser Example"},{"location":"sdk/#server-example","text":"import Flagship from 'flagship'; /* Note: Your user key can be whatever you want to distinctly identify a user, as long as it's a string */ const flagship = Flagship( 'example.com', // host 1, // project id 'user-123', // user key null, // no signature is needed since the private key is given below privateKey // this should be kept somewhere secure ); context = { accountId: 39, countryCode: 'US' }; /* This should be called whenever the context changes. This makes a request to the Flags API. */ flagship.load(context); const enabledFeatureFlags = flagship.getEnabledFeatureFlags();","title":"Server Example"},{"location":"sdk/#python","text":"","title":"Python"},{"location":"sdk/#install_1","text":"pip install flagship_sdk","title":"Install"},{"location":"sdk/#example","text":"from flagship import Flagship # Get private key from some place secure private_key = ... # Note: Your user key can be whatever you want to distinctly # identify a user, as long as it's a string flagship = Flagship( host='example.com', project_id=1, user_key='user-123', private_key=private_key ) context = { account_id: 39, country_code: 'US' } # This should be called whenever the context changes. # This makes a request to the Flags API. flagship.load(context) enabled_feature_flags = flagship.get_enabled_feature_flags()","title":"Example"},{"location":"sdk/#generating-signatures","text":"To generate an auth signature for Flagship, you need to know the private key. Doing this on the browser is not secure since anyone can inspect your Javascript and see your system's private key. To get around this, you can keep the private key securel server-side, generate the signature there, and send it to the client, without ever exposing the private key. from flagship import Flagship def your_endpoint(): # Get private key from some place secure private_key = ... flagship = Flagship( host='example.com', project_id=1, user_key='user-123', private_key=private_key ) return { 'signature': flagship.generate_signature() }","title":"Generating Signatures"},{"location":"ui/","text":"UI The Flagship UI lets you manage everything - projects, context fields, feature flags, and users. You can find screenshots here . Navigation Login You must first log in using your email and password. If you've forgotten your password, you can reset it from here. Top Bar Depending on your permissions, top bar allows you to navigate to the Projects, Users, and System Audit Logs pages. You can view the Help page by clicking the question mark button on the right side of the top bar. You can also view your profile and log out. If you have navigated within a project, you will see the active project's name here. Additionally, you can switch between light and dark mode. Home Page You will see a table with all projects on the home page. From here, you can can navigate to the feature flags or context fields of each project. Infrastructure The UI server is written in Typescript and uses Tailwind CSS and Next.js. Dependencies The only external dependency of the UI is the Admin API. Installation You can use the following Docker image from Dockerhub: alexschimpf/flagship-frontend:latest You can read more about configuring this server in Installation .","title":"UI"},{"location":"ui/#ui","text":"The Flagship UI lets you manage everything - projects, context fields, feature flags, and users. You can find screenshots here .","title":"UI"},{"location":"ui/#navigation","text":"","title":"Navigation"},{"location":"ui/#login","text":"You must first log in using your email and password. If you've forgotten your password, you can reset it from here.","title":"Login"},{"location":"ui/#top-bar","text":"Depending on your permissions, top bar allows you to navigate to the Projects, Users, and System Audit Logs pages. You can view the Help page by clicking the question mark button on the right side of the top bar. You can also view your profile and log out. If you have navigated within a project, you will see the active project's name here. Additionally, you can switch between light and dark mode.","title":"Top Bar"},{"location":"ui/#home-page","text":"You will see a table with all projects on the home page. From here, you can can navigate to the feature flags or context fields of each project.","title":"Home Page"},{"location":"ui/#infrastructure","text":"The UI server is written in Typescript and uses Tailwind CSS and Next.js.","title":"Infrastructure"},{"location":"ui/#dependencies","text":"The only external dependency of the UI is the Admin API.","title":"Dependencies"},{"location":"ui/#installation","text":"You can use the following Docker image from Dockerhub: alexschimpf/flagship-frontend:latest You can read more about configuring this server in Installation .","title":"Installation"},{"location":"users/","text":"Users The Flagship UI also allows you to effectively manage users within the platform. Users must be invited from within Flagship. Each user is given a role and is assigned to one or more projects. User Roles Read only Read only users can view feature flags. They have the lowest level of permissions. Standard Standard users can manage feature flags and context fields. Admin Admins can do anything except delete projects and project private keys. Owner Owners can do anything . There should always be at least one owner. Initial Setup When you first launch Flagship, you need at least one owner to start with. From there, you can invite as many users as you need. If you're using the docker-compose setup, the database has a default owner user with the following credentials: Username Password owner@flag.ship Test123! If you're connecting Flagship to your own database (and have already created the necessary tables), you can add this user by running the following query: INSERT INTO flagship.users ( email, name, role, status, password ) VALUES ( 'owner@flag.ship', 'Flagship Owner', 20, 2, '$2a$12$Qwux2dsu.moP5dLszwxJ5uWbPy59UY1PPnoraat/lFh35ZbpZ7SLq' ); You can read more about this in Installation . Passwords Passwords must have: At least 8 characters At least one uppercase character At least one lowercase character At least one special character At least one number The Flagship UI allows you to reset your password from the login page.","title":"Users"},{"location":"users/#users","text":"The Flagship UI also allows you to effectively manage users within the platform. Users must be invited from within Flagship. Each user is given a role and is assigned to one or more projects.","title":"Users"},{"location":"users/#user-roles","text":"","title":"User Roles"},{"location":"users/#read-only","text":"Read only users can view feature flags. They have the lowest level of permissions.","title":"Read only"},{"location":"users/#standard","text":"Standard users can manage feature flags and context fields.","title":"Standard"},{"location":"users/#admin","text":"Admins can do anything except delete projects and project private keys.","title":"Admin"},{"location":"users/#owner","text":"Owners can do anything . There should always be at least one owner.","title":"Owner"},{"location":"users/#initial-setup","text":"When you first launch Flagship, you need at least one owner to start with. From there, you can invite as many users as you need. If you're using the docker-compose setup, the database has a default owner user with the following credentials: Username Password owner@flag.ship Test123! If you're connecting Flagship to your own database (and have already created the necessary tables), you can add this user by running the following query: INSERT INTO flagship.users ( email, name, role, status, password ) VALUES ( 'owner@flag.ship', 'Flagship Owner', 20, 2, '$2a$12$Qwux2dsu.moP5dLszwxJ5uWbPy59UY1PPnoraat/lFh35ZbpZ7SLq' ); You can read more about this in Installation .","title":"Initial Setup"},{"location":"users/#passwords","text":"Passwords must have: At least 8 characters At least one uppercase character At least one lowercase character At least one special character At least one number The Flagship UI allows you to reset your password from the login page.","title":"Passwords"}]}